//FROM LibraryEx
$EXTERN Map, Fetch, Seq, MapReduce, Inc, Dec, Compare, Sort, DelAccumulator;

//FROM Library
$EXTERN Add, StrFromInt, WriteLine;

//FROM Escape
$EXTERN EscapeChar;

//FROM HardSent
$EXTERN CreateHardPattern;

//FROM GlobalGen
$EXTERN CreateGlobalGen, SplitGen, Max, PatternComment, ReverseGen;

/**
  <HighLevelRASL e.AST>
    == e.RASLAST

  e.RASLAST ::= t.RASLFunction*
  t.RASLFunction ::=
      (#Function s.ScopeClass (e.Name) t.HiRASLCommand*)
    | (s.SingularItem s.ScopeClass e.Name)
    | (#Ident e.Name)
    | (#Separator)
  s.SingularItem ::= #Enum | #Swap | #Stub | #Declaration
  t.HiRASLCommand ::=
      (#Cmd… e.Value)
    | (#CmdSentence t.HiRASLCommand*)
    | (#CmdOpenELoop #AlgLeft s.BracketNum s.VarNumber t.HiRASLCommand*)
*/
$ENTRY HighLevelRASL-OptPattern {
  e.ProgramElements =
    <Map
      {
        (#Function s.ScopeClass (e.Name) e.Sentences) =
          <HighLevelRASL-Function
            s.ScopeClass (e.Name) e.Sentences
          >;

        (#Enum s.ScopeClass e.Name) =
          (#CmdEnum s.ScopeClass e.Name);

        (#Swap s.ScopeClass e.Name) =
          (#CmdSwap s.ScopeClass e.Name);

        (#Stub s.ScopeClass e.Name) =
          /* пусто */;

        (#Declaration s.ScopeClass e.Name) =
          (#CmdDeclaration s.ScopeClass e.Name);

        (#Ident e.Name) = (#CmdDefineIdent e.Name);

        (#Separator) = (#CmdSeparator);
      }
      e.ProgramElements
    >;
}

Debug {
  e.Message = { e.all = e.all <WriteLine e.Message e.all>; };
}

ListLen {
  (s.Len) t.Elem e.ListTail =
    <ListLen (<Inc s.Len>) e.ListTail>;
  (s.Len) = s.Len;
}

HighLevelRASL-Function {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      <ListLen (0) e.Sentences>
      {
        0 = (#CmdEnum s.ScopeClass e.Name);
        s.Else =
          <HighLevelRASL-MulFunction s.ScopeClass (e.Name) e.Sentences>;
      }
    >;
}

HighLevelRASL-MulFunction {
  s.ScopeClass (e.Name) e.Sentences =
    <Fetch
      e.Sentences
      <Seq
        // ({e.all = e.all <WriteLine 'start:\n' e.all>;})
        (MapReduce
          {
            (e.HardGens) ((e.Pattern) (e.Result)) =
              <Fetch
                <CreateHardPattern e.Pattern>
                {
                  e.HardGen =
                    (e.HardGens (e.HardGen))
                    ((<PatternComment e.HardGen>) (e.Result));
                }
              >;
          }
          (/* hard gens */)
        )
        // ({e.all = e.all <WriteLine 'HL1:\n' e.all>;})
        {
          (e.HardPatterns) e.SentenceTails =
            <CreateGlobalGen e.HardPatterns> e.SentenceTails;
        }
        // ({e.all = e.all <WriteLine 'HL2:\n' e.all>;})
        {
          (e.FastGen) (e.GlobalGen) e.SentenceTails =
            (
              (#CmdComment 'FAST GEN:' <PatternComment e.FastGen>)
              (#CmdComment 'GLOBAL GEN:' <PatternComment e.GlobalGen>)
            )
            (<SplitGen (e.GlobalGen)>)
            e.SentenceTails;
        }
        // ({e.all = e.all <WriteLine 'HL3:\n' e.all>;})
        {
          (e.Comments) ((e.CommonPattern) e.SentSubsts) e.SentenceTails =
            (e.Comments)
            (<GenPattern <ReverseGen e.CommonPattern>>)
            <DelAccumulator
              <MapReduce
                {
                  ((e.Substitute) e.Substs) ((e.HardGenComment) (e.Result)) =
                    (e.Substs)
                    ((e.Substitute) (e.HardGenComment) (e.Result));
                }
                (e.SentSubsts) e.SentenceTails
              >
            >;
        }
        // {e.all = e.all <WriteLine 'HL4:\n' e.all>;}
        {
          (e.Comments^) ((e.Vars) s.ContextSize (e.CommonMatchCommands)) e.SentencesWithSubst =
            (e.Comments e.CommonMatchCommands)
            <MapReduce
              {
                s.MaxMemory ((e.Substitute) (e.HardGenComment) (e.Result)) =
                  <Fetch
                    <GenSentence s.ContextSize (e.Vars) (e.Substitute) (e.Result)>
                    {
                      (#CmdIssueMem s.Memory) e.Commands =
                        <Max s.MaxMemory s.Memory>
                        (#CmdSentence
                          (#CmdComment e.HardGenComment)
                          e.Commands
                        );
                    }
                  >;
              }
              s.ContextSize e.SentencesWithSubst
            >;
        }
        // ({e.all = e.all <WriteLine 'HL5:\n' e.all>;})
        {
          (e.Prefix) s.MaxMemory e.Sentences^ (#CmdSentence e.LastSentence) =
            (#Function
              s.ScopeClass (e.Name)
              (#CmdIssueMem s.MaxMemory)
                          (#CmdInitB0)
              e.Prefix
              e.Sentences
              <Fetch
                e.LastSentence
                {
                  e.Commands (#CmdOpenELoop e.OpenELoop) =
                    e.Commands (#CmdOpenELoop e.OpenELoop) (#CmdFail);
                  e.LastSentence^ = e.LastSentence;
                }
              >
            );

          (e.Prefix) 0 /* нет предложений */ =
            (#CmdEnum s.ScopeClass e.Name);
        }
        // ({e.all = e.all <WriteLine 'End:\n' e.all>;})
      >
    >;
}

GenSentence {
  // s.ContextSize (e.Vars) (e.Substitute) (e.Result) = (#CmdIssueMem s.ContextSize);
  s.ContextSize (e.Vars) (e.Substitute) (e.Result) =
    <Fetch
      s.ContextSize (e.Vars) (e.Substitute) (e.Result)
      <Seq
        // 1. (e.Vars) (e.Substitute) => (e.PrepSubstitute)
        {
          e.Head (e.Vars) (e.Substitute) e.Tail =
            e.Head
            <ComposeVars (/* Scanned */) (e.Substitute) (e.Vars)>
            e.Tail;
        }
        // 2. #E #CmdSave
        {
          s.ContextSize (e.Substitutes) e.Tail^ =
            <ReassignEs s.ContextSize e.Substitutes>
            e.Tail;
        }
        // 3. GenPattern-New
        // 3.1. GenResult
        {
          s.MaxMemory (e.Saves) (e.Substitutes) (e.Result^) =
            <Fetch
              <GenPattern-New s.MaxMemory (e.Saves) (e.Substitutes)>
              {
                (e.PatternVars) s.ContextOffset (e.PatternCommands) =
                  <Fetch
                    <GenResult s.ContextOffset (e.PatternVars) e.Result>
                    {
                      s.ContextCount e.ResultCommands =
                        <FoldOpenELoops
                          (#CmdIssueMem <Max s.MaxMemory s.ContextCount>)
                          e.PatternCommands
                          e.ResultCommands
                        >;
                    }
                  >;
              }
            >;
        }
      >
    >;
}

ComposeVars {
  (e.Scanned)
  (e.Substitute-B (s.Tag (e.Name) '$' e.Subst) e.Substitute-E)
  (e.Vars-B (s.Mode (e.Name) s.Offset) e.Vars-E) =
    <ComposeVars
      (e.Scanned (s.Tag s.Offset e.Subst))
      (e.Substitute-B e.Substitute-E) (e.Vars-B e.Vars-E)
    >;
  (e.Scanned) () () = (e.Scanned);
}

ReassignEs {
  s.ContextOffset e.Substitutes =
    <Fetch
      <MapReduce
        {
          (s.Offset (e.Saves)) (#E s.Old e.Subst) =
            (<Inc2 s.Offset> 
            (e.Saves (#CmdSave s.Old s.Offset)))
            (#E s.Offset e.Subst);
          (s.Offset (e.Saves)) (e.Other) =
            (s.Offset (e.Saves )) (e.Other);
        }
        (s.ContextOffset (/* Saves */)) e.Substitutes
      >
      {
        (s.Offset (e.Saves)) e.Substitutes^ =
          s.Offset (e.Saves) (e.Substitutes);
      }
    >;
}

FoldOpenELoops {
  e.Commands-B (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber) e.Commands-E =
    e.Commands-B
    (#CmdOpenELoop
      #AlgLeft s.BracketNum s.VarNumber
      <FoldOpenELoops e.Commands-E>
    );

  e.Commands = e.Commands;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

/*
Команды распознавания
  Литералы, формат (#Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (#CmdBrackets s.Direction s.BracketNum s.InnerNum)
  АТД, формат
    (#CmdADT s.Direction s.BracketNum s.InnerNum e.Name)
  Пустые скобки, формат (#CmdEmpty #AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (#CmdRepeated s.Direction s.BracketNum s.Mode s.VarNumber s.SampleNumber)
    новые s и t, формат (#CmdVar s.Direction s.BracketNum s.Mode s.VarNumber)
    открытые e:
      первоначальный формат (#CmdOpenedE #AlgLeft s.BracketNum s.VarNumber)
      после обработки:
        (#CmdOpenedE-Start #AlgLeft s.BracketNum 'e' e.Index)
        (#CmdOpenedE-End #AlgLeft s.BracketNum 'e' e.Index)
  Команды сохранения скобок
    (#CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (#CmdComment e.Text)
*/

GenPattern {
  e.Pattern =
    <Fetch
      <DoGenPattern
        2 (#E 0 e.Pattern) (/* vars */) (/* commands */)
      >
      <Seq
         {
          s.ContextOffset (e.Vars) e.Commands =
            (e.Vars)
            <FreezeRanges s.ContextOffset e.Commands>;
        }
        {
          (e.Vars) s.ContextOffset e.Commands =
            (e.Vars) s.ContextOffset
            <GetRangeReassigns e.Commands>;
        }
        {
          (e.Vars) s.ContextOffset (e.Reassigns) e.Commands =
            (<FixupEVarIndexes (e.Reassigns) e.Vars>)
            s.ContextOffset e.Commands;
        }
        {
          (e.Vars) s.ContextOffset e.Commands =
            (e.Vars)
            s.ContextOffset
            (e.Commands);
        }
      >
    >;
}

GenPattern-New {
  s.MaxMemory (e.Saves) (e.Substitutes) =
    <Fetch
      <DoGenPattern
        s.MaxMemory e.Substitutes (/* vars */) (e.Saves)
      >
      <Seq
         {
          s.ContextOffset (e.Vars) e.Commands =
            (e.Vars)
            <FreezeRanges s.ContextOffset e.Commands>;
        }
        {
          (e.Vars) s.ContextOffset e.Commands =
            (e.Vars) s.ContextOffset
            <GetRangeReassigns e.Commands>;
        }
        {
          (e.Vars) s.ContextOffset (e.Reassigns) e.Commands =
            (<FixupEVarIndexes (e.Reassigns) e.Vars>)
            s.ContextOffset e.Commands;
        }
        {
          (e.Vars) s.ContextOffset e.Commands =
            (e.Vars)
            s.ContextOffset
            (e.Commands);
        }
      >
    >;
}

GetRangeReassigns {
  e.Commands =
    <MapReduce
      {
        (e.Reassigns-B (s.First s.Old) e.Reassigns-E)
        (#CmdSave s.Old s.New) =
          (e.Reassigns-B (s.First s.New) e.Reassigns-E (s.Old s.New))
          (#CmdSave s.Old s.New);

        (e.Reassigns) (#CmdSave s.Old s.New) =
          (e.Reassigns (s.Old s.New)) (#CmdSave s.Old s.New);

        (e.Reassigns) t.OtherCommand =
          (e.Reassigns) t.OtherCommand;
      }
      (/* переназначения диапазонов */)
      e.Commands
    >;
}

FixupEVarIndexes {
  (e.Reassigns) e.Vars =
    <Map
      {
        ('e' (e.Index) e.Numbers) =
          ('e' (e.Index)
            <Map (FixupEVarIndexes-PatchNumber e.Reassigns) e.Numbers>
          );

        t.OtherVar = t.OtherVar;
      }
      e.Vars
    >;
}

FixupEVarIndexes-PatchNumber {
  e.Reassigns-B (s.Old s.New) e.Reassigns-E s.Old = s.New;

  e.Reassigns s.Number = s.Number;
}

FixupMarkedPatternIndexes {
  (e.Reassigns) e.MarkedPattern =
    <Map (FixupMarkedPatternTerm e.Reassigns) e.MarkedPattern>;
}

FixupMarkedPatternTerm {
  e.Reassigns-B (s.Old s.New) e.Reassigns-E
  (#TkVariable 'e' e.Index s.Depth s.Old) =
    (#TkVariable 'e' e.Index s.Depth s.New);

  e.Reassigns^ t.OtherTerm = t.OtherTerm;
}

Inc2 {
  s.Num = <Add 2 s.Num>;
}

DoGenPattern {
  // Распознавание Т-подстановки
  s.ContextOffset
  e.Substs-B (#T s.Num (#TkChar s.Char)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgTerm s.Num s.Char)) //
    >;
  s.ContextOffset
  e.Substs-B (#T s.Num (#TkName e.Name)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgTerm s.Num e.Name)) //
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkIdentifier e.Ident)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgTerm s.Num e.Ident)) //
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkNumber s.Value)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgTerm s.Num s.Value)) //
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#Brackets e.SubRange)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B (#E s.ContextOffset e.SubRange) e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgTerm s.Num s.ContextOffset)) //
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkVariable s.Mode e.Index)) e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.Num)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgTerm s.Num s.Mode s.SampleOffset) //
      )
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkVariable 't' e.Index)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (e.Vars ('t' (e.Index) s.Num)) (e.Commands)
    >;

  s.ContextOffset
  e.Substs-B (#T s.Num (#TkVariable 's' e.Index)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (e.Vars ('s' (e.Index) s.Num))
      (e.Commands (#CmdVar #AlgTerm s.Num 's' s.ContextOffset)) //
    >;

  // Распознавание S-подстановки
  s.ContextOffset
  e.Substs-B (#S s.Num (#TkChar s.Char)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgTerm s.Num s.Char)) //
    >;
  s.ContextOffset
  e.Substs-B (#S s.Num (#TkName e.Name)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgTerm s.Num e.Name))  //
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkIdentifier e.Ident)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgTerm s.Num e.Ident)) //
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkNumber s.Value)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgTerm s.Num s.Value)) //
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkVariable s.Mode e.Index)) e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.Num)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgTerm s.Num s.Mode s.SampleOffset) //
      )
    >;

  s.ContextOffset
  e.Substs-B (#S s.Num (#TkVariable 's' e.Index)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset e.Substs-B e.Substs-E
      (e.Vars ('s' (e.Index) s.Num)) (e.Commands)
    >;

  // Распознавание литералов (символьных, целочисленных, имён)
  s.ContextOffset
  e.Substs-B (#E s.Num (#TkChar s.Char) e.Range) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgLeft s.Num s.Char))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkNumber s.Number) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgLeft s.Num s.Number))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num (#TkName e.Name) e.Range) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B (#E s.Num e.Range) e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgLeft s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkIdentifier e.Name) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgLeft s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num e.Range (#TkChar s.Char)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdChar #AlgRight s.Num s.Char))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkNumber s.Number))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdNumber #AlgRight s.Num s.Number))
    >;

  s.ContextOffset
  e.Substs-B (#E s.Num e.Range (#TkName e.Name)) e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdName #AlgRight s.Num e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkIdentifier e.Name))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdIdent #AlgRight s.Num e.Name))
    >;

  // Распознавание скобок
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#Brackets e.SubRange) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.ContextOffset e.SubRange)
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgLeft s.Num s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#Brackets e.SubRange))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      (#E s.ContextOffset e.SubRange)
      e.Substs-E
      (e.Vars) (e.Commands (#CmdBrackets #AlgRight s.Num s.ContextOffset))
    >;

  // Распознавание АТД-скобок
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#ADT-Brackets (e.Name) e.SubRange) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.ContextOffset e.SubRange)
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars)
      (e.Commands (#CmdADT #AlgLeft s.Num s.ContextOffset e.Name))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#ADT-Brackets (e.Name) e.SubRange))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      (#E s.ContextOffset e.SubRange)
      e.Substs-E
      (e.Vars)
      (e.Commands (#CmdADT #AlgRight s.Num s.ContextOffset e.Name))
    >;

  // Пустой диапазон
  s.ContextOffset
  e.Substs-B
  (#E s.Num /* пусто */)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B e.Substs-E
      (e.Vars) (e.Commands (#CmdEmpty #AlgLeft s.Num))
    >;

  // Распознавание переменных
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable s.Mode e.Index) e.Range)
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      <IncVarOffset s.ContextOffset s.Mode>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.ContextOffset)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgLeft s.Num s.Mode s.ContextOffset s.SampleOffset)
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable s.Mode e.Index))
  e.Substs-E
  (e.Vars-B (s.Mode (e.Index) e.Offsets s.SampleOffset) e.Vars-E) (e.Commands) =
    <DoGenPattern
      <IncVarOffset s.ContextOffset s.Mode>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (
        e.Vars-B
        (s.Mode (e.Index) e.Offsets s.SampleOffset s.ContextOffset)
        e.Vars-E
      )
      (
        e.Commands
        (#CmdRepeated #AlgRight s.Num s.Mode s.ContextOffset s.SampleOffset)
      )
    >;

  // Диапазон с закрытой переменной
  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 'e' e.Index))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.ContextOffset
      e.Substs-B
      e.Substs-E
      (e.Vars ('e' (e.Index) s.Num))
      (e.Commands
        (#CmdComment
          ' closed ' <PrintVar 'e' e.Index> ' as range ' <StrFromInt s.Num>
        )
      )
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 's' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgLeft s.Num 's' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable 's' e.Index))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('s' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgRight s.Num 's' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 't' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgLeft s.Num 't' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num e.Range (#TkVariable 't' e.Index))
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('t' (e.Index) s.ContextOffset))
      (e.Commands (#CmdVar #AlgRight s.Num 't' s.ContextOffset))
    >;

  s.ContextOffset
  e.Substs-B
  (#E s.Num (#TkVariable 'e' e.Index) e.Range)
  e.Substs-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc2 s.ContextOffset>
      e.Substs-B
      (#E s.Num e.Range)
      e.Substs-E
      (e.Vars ('e' (e.Index) s.ContextOffset))
      (e.Commands (#CmdOpenedE #AlgLeft s.Num s.ContextOffset))
    >;

  // Завершение разбора.
  s.ContextOffset (e.Vars) (e.Commands) =
    s.ContextOffset (e.Vars) e.Commands;
}

IncVarOffset {
  s.ContextOffset 'e' = <Inc2 s.ContextOffset>;
  s.ContextOffset 't' = <Inc s.ContextOffset>;
  s.ContextOffset 's' = <Inc s.ContextOffset>;
}

FreezeRanges {
  s.ContextTop e.Commands = <DoFreezeRanges s.ContextTop () e.Commands>;
}

DoFreezeRanges {
  s.ContextTop (e.Scanned)
  e.Commands-B (#CmdOpenedE #AlgLeft s.Num s.ContextOffset) e.Commands-E =
    <Fetch
      e.Scanned e.Commands-B (#CmdOpenedE #AlgLeft s.Num s.ContextOffset)
      {
        e.CommandsBeforeEMatch =
          <DoFreezeRanges-MakeSavers
            s.ContextTop
            ( <ExtractRanges e.CommandsBeforeEMatch> )
            ( e.CommandsBeforeEMatch )
            e.Commands-E
          >;
      }
    >;

  s.ContextTop (e.Scanned) e.Commands = s.ContextTop e.Scanned e.Commands;
}

DoFreezeRanges-MakeSavers {
  s.ContextTop
  (e.FrozenRanges-B s.Num e.FrozenRanges-E)
  (e.Scanned)
  e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E =
    <DoFreezeRanges-MakeSavers
      <Inc2 s.ContextTop>
      (e.FrozenRanges-B e.FrozenRanges-E)
      (e.Scanned (#CmdSave s.Num s.ContextTop))
      <Map
        {
          /*
            Все команды распознавания содержат номер скобок третьим термом,
            общий формат (s.Command s.Direction s.BracketNum e.Info)
          */
          (s.Command^ s.Direction^ s.Num e.Info^) =
            (s.Command s.Direction s.ContextTop e.Info);

          (#CmdRepeated s.Direction^ s.OtherNum 'e' s.NewOffset s.Num) =
            (#CmdRepeated s.Direction s.OtherNum 'e' s.NewOffset s.ContextTop);

          (s.Command^ s.Direction^ s.OtherNum e.Info^) =
            (s.Command s.Direction s.OtherNum e.Info);
        }
        e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E
      >
    >;

  s.ContextTop (e.UnusedFrozenRanges) (e.Scanned) e.Commands =
    <DoFreezeRanges s.ContextTop (e.Scanned) e.Commands>;
}

ExtractRanges {
  e.Commands =
    <UniqueRanges
      <Map
        {
          /*
            Все команды распознавания содержат номер скобок третьим термом,
            общий формат (s.Command s.Direction s.BracketNum e.Info)
          */
          (#CmdBrackets s.Direction s.BracketNum s.InnerNum) =
            s.BracketNum s.InnerNum;

          (#CmdADT s.Direction s.BracketNum s.InnerNum e.Name) =
            s.BracketNum s.InnerNum;

          (#CmdComment e.Comment) =
            /* пусто */;

          (s.Command s.Direction s.BracketNum e.Info) = s.BracketNum;
        }
        e.Commands
      >
    >;
}

UniqueRanges {
  e.Unique s.Repeated e.Middle s.Repeated e.Rest =
    e.Unique <UniqueRanges s.Repeated e.Middle e.Rest>;

  e.Unique = e.Unique;
}

TextFromPattern {
  (#TkOpenBracket) e.Tail = ' (' <TextFromPattern e.Tail>;
  (#TkCloseBracket) e.Tail = ' )' <TextFromPattern e.Tail>;

  (#TkOpenADT) (#TkName e.Name) e.Tail = ' [' e.Name <TextFromPattern e.Tail>;
  (#TkCloseADT) e.Tail = ' ]' <TextFromPattern e.Tail>;

  (#TkChar s.Char) e.Tail =
    ' ' '' <TextFromPattern-Char (#TkChar s.Char) e.Tail>;

  (#TkNumber s.Number) e.Tail =
    ' ' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (#TkName e.Name) e.Tail =
    ' & ' e.Name <TextFromPattern e.Tail>;

  (#TkVariable s.Mode e.Index s.Depth s.Offset) e.Tail =
    ' ' <PrintVar s.Mode e.Index s.Depth> '/' <StrFromInt s.Offset>
    <TextFromPattern e.Tail>;

  (#TkIdentifier e.Name) e.Tail =
    ' # ' e.Name <TextFromPattern e.Tail>;

  = ;
}

PrintVar {
  s.Mode e.Index s.Depth = s.Mode '.' e.Index '#' <StrFromInt s.Depth>;
}

Escape {
  s.Char = <EscapeChar s.Char>;
}

TextFromPattern-Char {
  (#TkChar s.Char) e.Tail =
    <Escape s.Char> <TextFromPattern-Char e.Tail>;

  e.Other = '' <TextFromPattern e.Other>;
}

//==============================================================================
// Генерация результата
//==============================================================================

GenResult {
  s.ContextOffset (e.PatternVars) e.Result =
    <Fetch
      <DoGenResult
        (
          <Map
            {
              (s.Mode (e.Index) e.Offsets) = (s.Mode (e.Index) () e.Offsets);
            }
            e.PatternVars
          >
        )
        (/* alloc commands */) (/* other commands */)
        s.ContextOffset // счётчик новых элементов
        <CollectStrings e.Result>
      >
      {
        s.ContextOffset^ (e.CommonVars) e.ResultCommands =
          s.ContextOffset
          <MakeVariableCommentTable e.CommonVars>
          (#CmdEmptyResult)
          e.ResultCommands
          (#CmdReturnResult);
      }
    >;
}

CollectStrings {
  (#TkChar s.Value1) (#TkChar s.Value2) e.Tail =
    <Fetch
      <BuildString (s.Value1 s.Value2) e.Tail>
      {
        (e.Chars) e.Tail^ = (#TkString e.Chars) <CollectStrings e.Tail>;
      }
    >;

  (#Brackets e.InBrackets) e.Tail =
    (#Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (#CallBrackets e.InBrackets) e.Tail =
    (#CallBrackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  (#ADT-Brackets e.InBrackets) e.Tail =
    (#ADT-Brackets <CollectStrings e.InBrackets>) <CollectStrings e.Tail>;

  t.OtherTerm e.Tail = t.OtherTerm <CollectStrings e.Tail>;

  /* пусто */ = /* пусто */;
}

BuildString {
  (e.Chars) (#TkChar s.Value) e.Tail =
    <BuildString (e.Chars s.Value) e.Tail>;

  (e.Chars) e.Tail = (e.Chars) e.Tail;
}

// Основные команды работы с образцом
//  (#CmdAllocateElem s.Number s.ElType e.Info)
//  (#CmdLinkBrackets s.Left s.Right)
//  (#CmdPushStack s.Number)
//  (#CmdInsertElem s.Number)
//  (#CmdInsertVar s.Mode s.Number)

/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

DoGenResult {
  // Создаём литералы
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (#TkChar s.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElChar s.Value))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (#TkName e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElName e.Name))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkNumber s.Number) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElNumber s.Number))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkIdentifier e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElIdent e.Name))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkString e.Chars) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElString e.Chars))
      ((#CmdInsertRange s.Counter) e.Commands)
      <Add s.Counter 2> e.Result
    >;

  /*
    Обработка открывающих скобок всех трёх типов осуществляется похоже.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#Brackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElOpenBracket))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (#TkCloseBracket s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#CallBrackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElOpenCall))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (#CloseCall s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#ADT-Brackets (e.Name) e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElOpenADT))
      ((#CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter>
      (#TkName e.Name) e.InBrackets (#TkCloseADT s.Counter) e.Result
    >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД -- слинковать, угловые -- добавить в стек.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkCloseBracket s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElCloseBracket))
      (
        (#CmdLinkBrackets s.OpenCounter s.Counter)
        (#CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#TkCloseADT s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElCloseADT))
      (
        (#CmdLinkBrackets s.OpenCounter s.Counter)
        (#CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#CloseCall s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (#CmdAllocateElem s.Counter #ElCloseCall))
      (
        (#CmdPushStack s.Counter)
        (#CmdPushStack s.OpenCounter)
        (#CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  // Обработка переменных
  (
    e.Vars-B
    (s.Mode (e.Index) (e.ResultVars) s.NextPatternVar e.PatternVars)
    e.Vars-E
  )
  (e.AllocCommands) (e.Commands)
  s.Counter (#TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (
        e.Vars-B
        (s.Mode (e.Index) (e.ResultVars s.NextPatternVar) e.PatternVars)
        e.Vars-E
      )
      (e.AllocCommands)
      ((#CmdInsertVar s.Mode s.NextPatternVar) e.Commands)
      s.Counter e.Result
    >;

  (e.Vars-B (s.Mode (e.Index) (e.ResultVars s.Sample)) e.Vars-E)
  (e.AllocCommands) (e.Commands)
  s.Counter (#TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars-B (s.Mode (e.Index) (e.ResultVars s.Sample s.Counter)) e.Vars-E)
      (e.AllocCommands (#CmdCopyVar s.Mode s.Counter s.Sample))
      ((#CmdInsertVar s.Mode s.Counter) e.Commands)
      <IncVarOffset s.Counter s.Mode> e.Result
    >;

  // Завершение просмотра
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter =
    s.Counter (e.Vars) e.AllocCommands e.Commands;
}

MakeVariableCommentTable {
  e.Vars =
    <Fetch
      e.Vars
      <Seq
        (Map ReplicateVar)
        Sort
        (Map MakeVariableComment)
      >
    >;
}

ReplicateVar {
  (s.Mode (e.Index) (e.ResultOccurences) e.PatternOccurences) =
    <Map
      {
        s.ContextOffset = (s.ContextOffset s.Mode e.Index);
      }
      e.ResultOccurences e.PatternOccurences
    >;
}

MakeVariableComment {
  (s.Offset s.Mode e.Index s.Depth) =
    (#CmdComment
      <StrFromInt s.Offset> ': ' <PrintVar s.Mode e.Index s.Depth>
    );
}
