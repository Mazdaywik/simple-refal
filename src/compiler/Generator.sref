FuncArguments {
  = 'refalrts::Iter arg_begin, refalrts::Iter arg_end';
}

NakedArguments {
  = 'refalrts::Iter, refalrts::Iter';
}

TextFromMemoryClass {
  #GN-Local = 'static '; #GN-Entry = ;
}

SwGenFnStart {
  s.MemoryClass s.FnArguments e.Name =
    (
      <TextFromMemoryClass s.MemoryClass>
      'refalrts::FnResult ' e.Name '(' <s.FnArguments> ') {'
    )
    ('  refalrts::this_is_generated_function();');
}

GenFnStart {
  s.MemoryClass e.Name =
    <SwGenFnStart s.MemoryClass FuncArguments e.Name>;
}

GenExtern {
  e.Name =
    ('extern refalrts::FnResult ' e.Name '(' <FuncArguments> ');');
}

GenForward {
  e.Name =
    ('static refalrts::FnResult ' e.Name '(' <FuncArguments> ');');
}

GenReturn {
  #Success e.Indent =
    (e.Indent
      'return refalrts::FnResult(refalrts::cSuccess | (__LINE__ << 8));'
    );

  #Fail e.Indent =
    (e.Indent
      'return refalrts::FnResult('
        'refalrts::cRecognitionImpossible | (__LINE__ << 8)'
      ');'
    );
}

GenSwap {
  s.MemoryClass e.Name =
    <GenFnStart s.MemoryClass e.Name>
    ('  refalrts::Iter func_name = arg_begin;')
    ()
    ('  refalrts::move_left( func_name, arg_end );')
    ()
    ('  refalrts::Iter info_b = func_name;')
    ('  refalrts::Iter info_e = arg_end;')
    ()
    ('  refalrts::move_left( info_b, info_e );')
    ('  refalrts::move_right( info_b, info_e );')
    ()
    ('  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );')
    ()
    ('  refalrts::Iter saved_b;')
    ('  refalrts::Iter saved_e;')
    ()
    ('  refalrts::swap_info_bounds( saved_b, saved_e, s_head );')
    ('  refalrts::splice_evar( arg_begin, saved_b, saved_e );')
    ('  refalrts::swap_save( s_head, info_b, info_e );')
    ('  refalrts::splice_to_freelist( arg_begin, arg_end );')
    ()
    <GenReturn #Success '  '>
    ('}')
    ();
}

GenIdent {
  e.Name =
    ('// identifier #' e.Name)
    ('template <typename SREFAL_PARAM_INT>')
    ('struct ident_' e.Name ' {')
    ('  static const char *name() {')
    ('    return "' e.Name '";')
    ('  }')
    ('};')
    ();
}

GenCommonHeaders {
  = ('// Automatically generated file. Don\'t edit!')
  ('#include "refalrts.h"')
  () ();
}

GenCommonTailer {
  = () ('//End of file');
}

//FROM LibraryEx
$EXTERN Map, MapReduce, Fetch;

//FROM Library
$EXTERN StrFromInt;

$ENTRY GenProgram {
  e.Algorithm =
    <GenCommonHeaders>
    <Fetch
      <MapReduce GenCommand (/* отступ */) e.Algorithm>
      {
        () /* отступ должен остаться тем же */
        e.Generated =
          e.Generated;
      }
    >
    <GenCommonTailer>;
}

ContextRange-B {
  s.RangeOffset = 'context[' <StrFromInt s.RangeOffset> ']';
}

//FROM Library
$EXTERN Inc;

ContextRange-E {
  s.RangeOffset = 'context[' <StrFromInt <Inc s.RangeOffset>> ']';
}

ContextRange {
  s.RangeOffset =
    <ContextRange-B s.RangeOffset> ', ' <ContextRange-E s.RangeOffset>;
}

ContextItem {
  s.ItemNumber = 'context[' <StrFromInt s.ItemNumber> ']';
}

PrintName {
  # CreateClosure = 'refalrts::create_closure';

  e.Name = e.Name;
}

PrintBracketsVarInit {
  e.Indent s.InnerBrackets =
    (e.Indent <ContextRange-B s.InnerBrackets> ' = 0;')
    (e.Indent <ContextRange-E s.InnerBrackets> ' = 0;')
    ;
}

PrintDirection {
  #AlgLeft = 'Left';
  #AlgRight = 'Right';
}

GenCommand {
  (e.Indent) (#CmdComment e.Text) = (e.Indent) (e.Indent '//' e.Text);

  (e.Indent) (#CmdEnum s.MemoryClass e.Name) =
    (e.Indent)
    <SwGenFnStart s.MemoryClass NakedArguments e.Name>
    <GenReturn #Fail '  '>
    ('}') ();

  (e.Indent) (#CmdSwap s.MemoryClass e.Name) =
    (e.Indent)
    <GenSwap s.MemoryClass e.Name>;

  (e.Indent) (#CmdDeclaration #GN-Entry e.Name) =
    (e.Indent)
    <GenExtern e.Name>;

  (e.Indent) (#CmdDeclaration #GN-Local e.Name) =
    (e.Indent)
    <GenForward e.Name>;

  (e.Indent) (#CmdDefineIdent e.Name) =
    (e.Indent)
    <GenIdent e.Name>;

  (e.Indent) (#CmdFnStart s.MemoryClass e.Name) =
    (e.Indent '  ')
    <GenFnStart s.MemoryClass e.Name>;

  (e.Indent) (#CmdSeparator) =
    (e.Indent)
    (e.Indent);

  (e.Indent '  ') (#CmdFnEnd) =
    (e.Indent)
    ('}') ();

  (e.Indent) (#CmdStartSentence) =
    (e.Indent '  ')
    (e.Indent 'do {')
    (e.Indent '  refalrts::start_sentence();');

  (e.Indent '  ') (#CmdEndSentence) =
    (e.Indent)
    (e.Indent '} while ( 0 );')
    ();

  (e.Indent) (#CmdInitB0) =
    (e.Indent)
    (e.Indent <ContextRange-B 0> ' = arg_begin;')
    (e.Indent <ContextRange-E 0> ' = arg_end;')
    (e.Indent 'refalrts::move_left( ' <ContextRange 0> ' );')
    (e.Indent 'refalrts::move_left( ' <ContextRange 0> ' );')
    (e.Indent 'refalrts::move_right( ' <ContextRange 0> ' );')
    ;

  (e.Indent) (#CmdChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (#CmdCharSave s.Direction s.BracketNumber s.Offset s.Char) =
    (e.Indent)
    <PrintMatchCharSave (e.Indent) s.Offset s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (#CmdNumber s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PrintMatchNumber (e.Indent) s.Direction s.BracketNumber s.Number>
    ;

  (e.Indent) (#CmdName s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (#CmdIdent s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchIdent (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (#CmdBrackets s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchBrackets (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>
    ;

  (e.Indent) (#CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >
    ;

  (e.Indent) (#CmdEmpty s.Direction s.BracketNumber) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNumber>
    ;

  (e.Indent) (#CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PrintMatchSTVar (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber>;

  (e.Indent) (#CmdRepeated s.Direction s.BracketNumber s.Mode s.Var s.Sample) =
    (e.Indent)
    <PrintMatchRepeated
      (e.Indent) s.Direction s.BracketNumber s.Mode s.Var s.Sample
    >;

  (e.Indent)
  (#CmdOpenedE-Start #AlgLeft s.BracketNumber s.VarNumber) =
    (e.Indent '  ')
    (e.Indent <ContextRange-B s.VarNumber> ' = 0;')
    (e.Indent <ContextRange-E s.VarNumber> ' = 0;')
    (e.Indent 'refalrts::start_e_loop();')
    (e.Indent 'do {')
    ;

  (e.Indent '  ')
  (#CmdOpenedE-End #AlgLeft s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '} while ( refalrts::open_evar_advance( '
      <ContextRange s.VarNumber> ', ' <ContextRange s.BracketNumber>
      ' ) );'
    )
    ;

  (e.Indent) (#CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent
      <ContextRange-B s.NewBracketNumber>
      ' = ' <ContextRange-B s.OldBracketNumber> ';'
    )
    (e.Indent
      <ContextRange-E s.NewBracketNumber>
      ' = ' <ContextRange-E s.OldBracketNumber> ';'
    )
    ;

  (e.Indent) (#CmdEmptyResult) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator();')
    (e.Indent 'refalrts::Iter res = arg_begin;');

  (e.Indent) (#CmdCopyVar 'e' s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      'if (! refalrts::copy_evar(' <ContextRange s.Target> ', '
      <ContextRange s.Sample> '))'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (#CmdCopyVar s.Mode s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      'if (! refalrts::copy_stvar(' <ContextItem s.Target> ', '
      <ContextItem s.Sample> '))'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (#CmdAllocateElem s.ElemNumber #ElString e.String) =
    (e.Indent)
    (e.Indent
      'if( ! refalrts::alloc_chars( '
      <ContextItem s.ElemNumber> ', ' <ContextItem <Inc s.ElemNumber>> ', '
      <PrintString e.String> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (#CmdAllocateElem s.ElemNumber e.ElemInfo) =
    (e.Indent)
    <PrintAllocateElem (e.Indent) s.ElemNumber e.ElemInfo>;

  (e.Indent) (#CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::link_brackets( '
      <ContextItem s.Left> ', ' <ContextItem s.Right>
      ' );'
    );

  (e.Indent) (#CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'refalrts::push_stack( ' <ContextItem s.ElemNumber> ' );');

  (e.Indent) (#CmdInsertElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_elem( res, ' <ContextItem s.ElemNumber> ' );'
    );

  (e.Indent) (#CmdInsertVar 'e' s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, ' <ContextRange s.Number> ' );'
    );

  (e.Indent) (#CmdInsertVar s.Mode s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_stvar( res, ' <ContextItem s.Number> ' );'
    );

  (e.Indent) (#CmdInsertRange s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <ContextItem s.Number> ', ' <ContextItem <Inc s.Number>>
      ' );'
    );

  (e.Indent) (#CmdReturnResult) =
    (e.Indent)
    (e.Indent 'refalrts::use( res );')
    (e.Indent 'refalrts::splice_to_freelist( arg_begin, arg_end );')
    <GenReturn #Success e.Indent>;

  (e.Indent) (#CmdIssueMem s.Number) =
    (e.Indent) (e.Indent '// issue here memory for vars with ' <StrFromInt s.Number> ' elems')
    (e.Indent 'refalrts::Iter context[' <StrFromInt s.Number> '];')
    (e.Indent 'refalrts::zeros( context, ' <StrFromInt s.Number> ' );')
    ;

  (e.Indent) (#CmdIfDef) =
    (e.Indent) ('#ifdef INTERPRET');

  (e.Indent) (#CmdElse) =
    (e.Indent) ('#else');

  (e.Indent) (#CmdEndIf) =
    (e.Indent) ('#endif');

  (e.Indent) (#CmdiFuncArray) =
    (e.Indent)
    (e.Indent 'using refalrts::functions;');

  (e.Indent) (#CmdiFuncArray e.FuncNames (e.LastName)) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalFunction functions[] = {')
    <Map
      {
        (e.Name) =
          (e.Indent
            '  { ' <PrintName e.Name> ', "' <PrintName e.Name> '" },'
          );
      }
      e.FuncNames
    >
    (e.Indent
      '  { ' <PrintName e.LastName> ', "' <PrintName e.LastName> '" }'
    )
    (e.Indent '};');

  (e.Indent) (#CmdiLabelArray) =
    (e.Indent)
    (e.Indent 'using refalrts::idents;');

  (e.Indent) (#CmdiLabelArray e.LabelNames (e.LastName)) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalIdentifier idents[] = {')
    <Map
      {
        (e.Name) = (e.Indent '  & ident_' e.Name '<int>::name,');
      }
      e.LabelNames
    >
    (e.Indent '  & ident_' e.LastName '<int>::name')
    (e.Indent '};');

  (e.Indent) (#CmdiNumberArray) =
    (e.Indent)
    (e.Indent 'using refalrts::numbers;');

  (e.Indent) (#CmdiNumberArray e.Numbers s.LastNumber) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalNumber numbers[] = {')
    <Map
      {
        s.Number = (e.Indent '  ' <StrFromInt s.Number> 'UL,');
      }
      e.Numbers
    >
    (e.Indent '  ' <StrFromInt s.LastNumber> 'UL')
    (e.Indent '};');

  (e.Indent) (#CmdiStringArray) =
    (e.Indent)
    (e.Indent 'using refalrts::strings;');

  (e.Indent) (#CmdiStringArray e.Strings (e.LastString)) =
    (e.Indent)
    (e.Indent 'static const refalrts::StringItem strings[] = {')
    <Map
      {
        (e.String) = (e.Indent '  {' <PrintString e.String> '},');
      }
      e.Strings
    >
    (e.Indent '  {' <PrintString e.LastString> '}')
    (e.Indent '};');

  (e.Indent)
  (#CmdiRepeat s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::ic' s.Mode 'Repeat' <PrintDirection s.Direction> ', '
      <StrFromInt s.VarNumber> ', '
      <StrFromInt s.SampleNumber> ', '
      <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiEPrepare s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icEPrepare, 0, '
      <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiEStart s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icEStart, 0, '
      <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icADT' <PrintDirection s.Direction> ', '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.InnerBrackets> ', '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (#CmdiSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent '{refalrts::icSave, 0, '
              <StrFromInt s.NewBracketNumber> ', '
              <StrFromInt s.OldBracketNumber> '},'
    )
    ;

  (e.Indent) (#CmdiChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    (e.Indent '{refalrts::icChar' <PrintDirection s.Direction> ', '
              '0, static_cast<unsigned char>(' '' <Escape s.Char> '' '), '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (#CmdiVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::ic' s.Mode 'Var' <PrintDirection s.Direction> ', '
      '0, ' <StrFromInt s.VarNumber> ', ' <StrFromInt s.BracketNumber> '},'
    );

  (e.Indent) (#CmdiName s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icFunc' <PrintDirection s.Direction> ', 0, '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.BracketNumber> '},'
    )
  ;

  (e.Indent) (#CmdiIdent s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icIdent' <PrintDirection s.Direction> ', '
              '0, '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (#CmdiNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    (e.Indent '{refalrts::icNum' <PrintDirection s.Direction> ', '
              '0, ' <StrFromInt s.Number> ', '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (#CmdiHugeNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    (e.Indent '{refalrts::icHugeNum' <PrintDirection s.Direction> ', '
              '0, ' <StrFromInt s.Number> ', '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (#CmdInitRAA) =
    (e.Indent '  ')
    (e.Indent 'static const refalrts::RASLCommand raa[] = {');

  (e.Indent '  ') (#CmdFinRAA) =
    (e.Indent)
    (e.Indent '  {refalrts::icEnd, 0, 0, 0}')
    (e.Indent '};');

  (e.Indent) (#CmdiReserveStack 0) =
    (e.Indent)
    (e.Indent 'int open_e_stack[1];');

  (e.Indent) (#CmdiReserveStack s.Depth) =
    (e.Indent)
    (e.Indent 'int open_e_stack[' <StrFromInt s.Depth> '];');

  (e.Indent) (#CmdiRunInterpret) =
    (e.Indent)
    (e.Indent 'refalrts::FnResult res = refalrts::interpret_array(')
    (e.Indent '  raa, context, arg_begin, arg_end,')
    (e.Indent '  functions, idents, numbers, strings, open_e_stack')
    (e.Indent ');')
    (e.Indent 'return res;');

  (e.Indent) (#CmdiEmptyResult) =
    (e.Indent)
    (e.Indent '{refalrts::icEmptyResult, 0, 0, 0},');

  (e.Indent) (#CmdiBracket s.Direction s.Num s.NumRanges) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket' <PrintDirection s.Direction> ', '
              '0, ' <StrFromInt s.NumRanges> ', ' <StrFromInt s.Num> '},'
    )
    ;

  (e.Indent) (#CmdiEmpty s.Num) =
    (e.Indent)
    (e.Indent '{refalrts::icEmpty, 0, 0, ' <StrFromInt s.Num> '},')
    ;

  (e.Indent) (#CmdiAllocateElem s.ElemNumber s.Type e.Info) =
    (e.Indent)
    <PrintInterpretAllocateElem (e.Indent) s.ElemNumber s.Type e.Info>;

  (e.Indent) (#CmdArrCopy 'e' s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCopyEVar, '
      <StrFromInt s.Target> ', ' <StrFromInt s.Sample> ', 0},'
    );

  (e.Indent) (#CmdArrCopy s.Mode s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCopySTVar, '
      <StrFromInt s.Target> ', ' <StrFromInt s.Sample> ', 0},'
    );

  (e.Indent) (#CmdArrSplice 'e' s.Offset) =
    (e.Indent)
    (e.Indent '{refalrts::icSpliceEVar, 0, 0, ' <StrFromInt s.Offset> '},');

  (e.Indent) (#CmdArrSplice s.Mode s.Offset) =
    (e.Indent)
    (e.Indent '{refalrts::icSpliceSTVar, 0, 0, ' <StrFromInt s.Offset> '},');

  (e.Indent) (#CmdSpliceElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icSpliceElem, 0, 0, ' <StrFromInt s.ElemNumber> '},'
    );

  (e.Indent) (#CmdSpliceRange s.ElemNumber) =
    (e.Indent)
    (e.Indent
      '{refalrts::icSpliceRange, 0, 0, ' <StrFromInt s.ElemNumber> '},'
    );

  (e.Indent) (#CmdiLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      '{refalrts::icLinkBrackets, '
      <StrFromInt s.Left> ', ' <StrFromInt s.Right> ', 0},'
    );

  (e.Indent) (#CmdiPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent '{refalrts::icPushStack, 0, 0, ' <StrFromInt s.ElemNumber> '},');

  (e.Indent) (#CmdFail) =
    (e.Indent)
    <GenReturn #Fail e.Indent>;

  (e.Indent) (#CmdiOnFailGoTo s.Offset) =
    (e.Indent)
    (e.Indent '{refalrts::icOnFailGoTo, +' <StrFromInt s.Offset> ', 0, 0},');

  (e.Indent) (#CmdiFail) =
    (e.Indent)
    (e.Indent '{refalrts::icFail, 0, 0, 0},');

  (e.Indent) (#CmdiReturnResult) =
    (e.Indent)
    (e.Indent '{refalrts::icReturnResult, 0, 0, 0},');

  (e.Indent) (#CmdiInitB0) =
    (e.Indent)
    (e.Indent '{refalrts::icInitB0, 0, 0, 0},');
}

//FROM Escape
$EXTERN EscapeChar;

Escape {
  s.Char = <EscapeChar s.Char>;
}

EscapeString {
  e.String = <Map EscapeChar e.String>;
}

PrintLength {
  e.String = <DoPrintLength 0 e.String>;
}

DoPrintLength {
  s.Length s.Char e.Tail = <DoPrintLength <Inc s.Length> e.Tail>;

  s.Length = <StrFromInt s.Length>;
}

PrintString {
  e.String = '"' <EscapeString e.String> '", ' <PrintLength e.String>;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNumber s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('char') '' <Escape s.Char> ''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNumber s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('number') <StrFromInt s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('function') e.Name
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('ident') ' & ident_' e.Name '<int>::name'
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('brackets')
      <ContextRange s.InnerNum>
    >;
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('adt')
      <ContextRange s.InnerNum> ', '
      e.Name
    >;
}

BreakerFromIndent {
  '  ' = 'return refalrts::cRecognitionImpossible;';

  e.OtherIndent = 'continue;';
}

PrintMatchEmpty {
  (e.Indent) s.BracketNumber =
    (e.Indent
      'if( ! refalrts::empty_seq( ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

StrFromDirection {
  #AlgLeft = 'left'; #AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      (<VarMatchFunction s.Mode>) <ContextItem s.VarNumber>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_evar')
      <ContextRange s.VarNumber> ', ' <ContextRange s.SampleNumber>
    >;

  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_stvar')
      <ContextItem s.VarNumber> ', ' <ContextItem s.SampleNumber>
    >;
}

PrintMatch {
  (e.Indent) s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintMatchCharSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber s.Char =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('char') '' <Escape s.Char> ''
    >;
}

PrintMatchSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      <ContextItem s.Offset> ' = '
      'refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <ContextRange s.BracketNumber> ' );'
    )
    (e.Indent 'if( ! ' <ContextItem s.Offset> ' )')
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintAllocateElem {
  (e.Indent) s.ElemNumber s.ElementType e.Info =
    (e.Indent
      'if( ! refalrts::' <AllocatorFuncName s.ElementType> '( '
      <ContextItem s.ElemNumber> <AllocatorFuncArgument s.ElementType e.Info>
      ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');
}

AllocatorFuncName {
  #ElChar = 'alloc_char';
  #ElName = 'alloc_name';
  #ElNumber = 'alloc_number';
  #ElIdent = 'alloc_ident';

  #ElOpenADT = 'alloc_open_adt';
  #ElCloseADT = 'alloc_close_adt';

  #ElOpenBracket = 'alloc_open_bracket';
  #ElCloseBracket = 'alloc_close_bracket';

  #ElOpenCall = 'alloc_open_call';
  #ElCloseCall = 'alloc_close_call';
}

AllocatorFuncArgument {
  #ElChar s.Char = ', ' '' <Escape s.Char> '';

  #ElName e.Name = ', ' <PrintName e.Name> ', "' <PrintName e.Name> '"';

  #ElNumber s.Number = ', ' <StrFromInt s.Number> 'UL';

  #ElIdent e.Name = ', & ident_' e.Name '<int>::name';

  // Остальное -- скобки
  s.Other = ;
}

PrintInterpretAllocateElem {
  (e.Indent) s.ElemNumber s.ElementType e.Info =
    (e.Indent
      '{refalrts::' <AllocatorCommandTag s.ElementType> ', '
      '0, '
      <AllocatorCommandInfo s.ElementType e.Info> ', '
      <StrFromInt s.ElemNumber> '},'
    );
}

AllocatorCommandTag {
  #ElChar = 'icChar';

  #ElName = 'icFunc';

  #ElHugeNumber = 'icHugeInt';
  #ElNumber = 'icInt';

  #ElIdent = 'icIdent';

  #ElOpenBracket = 'icBracket';
  #ElOpenADT = 'icBracket';
  #ElOpenCall = 'icBracket';
  #ElCloseBracket = 'icBracket';
  #ElCloseADT = 'icBracket';
  #ElCloseCall = 'icBracket';

  #ElString = 'icString';
}

AllocatorCommandInfo {
  #ElChar s.Char = '' <Escape s.Char> '';

  #ElName s.NameId = <StrFromInt s.NameId>;

  #ElHugeNumber s.NumberId = <StrFromInt s.NumberId>;
  #ElNumber s.Number = <StrFromInt s.Number>;

  #ElIdent s.NameId = <StrFromInt s.NameId>;

  #ElOpenBracket = 'refalrts::ibOpenBracket';
  #ElOpenADT = 'refalrts::ibOpenADT';
  #ElOpenCall = 'refalrts::ibOpenCall';
  #ElCloseBracket = 'refalrts::ibCloseBracket';
  #ElCloseADT = 'refalrts::ibCloseADT';
  #ElCloseCall = 'refalrts::ibCloseCall';

  #ElString s.StringId = <StrFromInt s.StringId>;
}
