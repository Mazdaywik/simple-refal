//FROM GetOpt
$EXTERN GetOpt;

//FROM GetOpt-CheckRepeated
$EXTERN GetOpt-CheckRepeated;

//FROM LibraryEx
$EXTERN Fetch, Seq, MapReduce, Map;

/**
  <ParseCommandLine e.Arguments>
    == #Success t.CppCompiler s.GenMode s.Opt t.ErrorFile
       ((e.Folder)*) (s.ArgNum e.File)*
    == #Fails (s.ArgNum e.ErrorMessage)

  t.CppCompiler ::= #NoCppCompiler | (e.CppCompiler)
  s.GenMode ::= #OnlyDirect | #OnlyInterpret | #Both
  s.Opt ::= #OptNone | #OptPattern | #OptResult
  t.ErrorFile ::= #NoErrorFile | (#ErrorFile e.FileName)
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <Fetch
      <GetOpt
        (
          (#CppCompiler #Required 'c' ('cpp-command'))
          (#GenMode #Required ('gen'))
          (#Opt #Required 'O')
          (#ErrorFile #Required 'e' ('error-file'))
          (#SearchFolder #Required 'd' ('dir') ('directory'))
          (#CppFlags #Required 'CF' ('cppflags'))
          (#CppFlag #Required 'f' ('cppflag'))
          (#RuntimeFolder #Required 'D' ('runtime-dir') ('runtime-directory'))
        )
        e.Arguments
      >
      <Seq
        {
          (e.Errors) e.Options =
            <GetOpt-CheckRepeated
              (#CppCompiler #GenMode #Opt #ErrorFile) (e.Errors) e.Options
            >;
        }
        {
          (e.Errors)
          e.Options-B (#CppCompiler s.Num e.CppCompiler) e.Options-E =
            (e.Errors) ((e.CppCompiler)) e.Options-B e.Options-E;

          (e.Errors) e.Options =
            (e.Errors) (#NoCppCompiler) e.Options;
        }
        {
          (e.Errors) (e.Bag) e.Options-B (#GenMode s.Num 'both') e.Options-E =
            (e.Errors) (e.Bag #Both) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options-B (#GenMode s.Num 'direct') e.Options-E =
            (e.Errors) (e.Bag #OnlyDirect) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options-B (#GenMode s.Num 'interp') e.Options-E =
            (e.Errors) (e.Bag #OnlyInterpret) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options-B (#GenMode s.Num e.BadVal) e.Options-E =
            (e.Errors (s.Num #BadValue-GenMode e.BadVal))
            (e.Bag #Both) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options =
            (e.Errors) (e.Bag #Both) e.Options;
        }
        {
          (e.Errors) (e.Bag) e.Options-B (#Opt s.Num 'P') e.Options-E =
            (e.Errors) (e.Bag #OptPattern) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options-B (#Opt s.Num 'R') e.Options-E =
            (e.Errors) (e.Bag #OptResult) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options-B (#Opt s.Num e.BadOpt) e.Options-E =
            (e.Errors (s.Num #BadValue-Opt e.BadOpt))
            (e.Bag #OptNone) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options =
            (e.Errors) (e.Bag #OptNone) e.Options;
        }
        {
          (e.Errors) (e.Bag)
          e.Options-B (#ErrorFile s.Num e.ErrorFile) e.Options-E =
            (e.Errors) (e.Bag (#ErrorFile e.ErrorFile)) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options =
            (e.Errors) (e.Bag #NoErrorFile) e.Options;
        }
        {
          (e.Errors) (e.Bag) e.Options =
            ((e.Errors) (e.Bag)) e.Options;
        }
        (MapReduce {
          ((e.Errors) (#NoCppCompiler e.Bag)) (#CppFlags s.Num e.Flags) =
            (
              (e.Errors (s.Num #FlagsForNoCompiler))
              (#NoCppCompiler e.Bag)
            );

          ((e.Errors) (#NoCppCompiler e.Bag)) (#CppFlag s.Num e.Flag) =
            (
              (e.Errors (s.Num #FlagsForNoCompiler))
              (#NoCppCompiler e.Bag)
            );

          ((e.Errors) ((e.CppCompiler) e.Bag)) (#CppFlags s.Num e.Flags) =
            (
              (e.Errors)
              ((e.CppCompiler ' ' e.Flags) e.Bag)
            );

          ((e.Errors) ((e.CppCompiler) e.Bag)) (#CppFlag s.Num e.Flag) =
            (
              (e.Errors)
              ((e.CppCompiler ' "' e.Flag '"') e.Bag)
            );

          ((e.Errors) (t.CppCompiler e.Bag)) (#RuntimeFolder s.Num e.Folder) =
            (
              (e.Errors)
              (
                <Fetch
                  t.CppCompiler {
                    #NoCppCompiler = #NoCppCompiler;
                    (e.CppCompiler^) = (e.CppCompiler ' -I"' e.Folder '"');
                  }
                >
                e.Bag
              )
            )
            (#SearchFolder s.Num e.Folder);

          ((e.Errors) (e.Bag)) t.OtherOption =
            ((e.Errors) (e.Bag)) t.OtherOption;
        })
        {
          ((e.Errors) (e.Bag)) e.Options =
            (e.Errors) (e.Bag) e.Options;
        }
        {
          (e.Errors) (e.Bag) e.Options =
            (e.Errors)
            <MapReduce
              {
                (e.Bag^ (e.Folders)) (#SearchFolder s.Num e.Folder) =
                  (e.Bag (e.Folders (e.Folder)));

                (e.Bag^) (#FILE s.Num e.FileName) =
                  (e.Bag) (s.Num e.FileName);
              }
              (e.Bag ())
              e.Options
            >;
        }
        {
          () (e.Bag) e.FileNames = #Success e.Bag e.FileNames;

          (e.Errors) (e.Bag) e.FileNames =
            #Fails
            <Map
              {
                (s.Pos #NoRequiredParam e.Param) =
                  (s.Pos 'option ' e.Param ' expects parameter');

                (s.Pos #UnknownShortOption s.Option) =
                  (s.Pos 'unknown option -' s.Option);

                (s.Pos #UnknownLongOption e.Option) =
                  (s.Pos 'unknown option --' e.Option);

                // У нас все опции с параметрами, не должно возникать
                // (s.Pos #UnexpectedLongOptionParam (e.Option) e.Param) =

                (s.Pos #RepeatOption s.Tag) =
                  (
                    s.Pos
                    'option '
                    <Fetch
                      s.Tag {
                        #CppCompiler = '-c or --cpp-command';
                        #GenMode = '--gen';
                        #Opt = '-O';
                        #ErrorFile = '-e or --error-file';
                      }
                    >
                    ' must appear one time'
                  );

                (s.Pos #BadValue-GenMode e.BadValue) =
                  (
                    s.Pos
                    'option --gen expects ''both'', ''direct'' or ''interp'', '
                    'but got ''' e.BadValue ''
                  );

                (s.Pos #BadValue-Opt e.BadValue) =
                  (
                    s.Pos
                    'option -O expects ''P'' or ''R'', '
                    'but got ''' e.BadValue ''
                  );
              }
              e.Errors
            >;
        }
      >
    >;
}
