$EXTERN WriteLine, Map, Fetch, Inc;

//From HardSent
$EXTERN CreateHardPattern;


$ENTRY ReverseFastGen {
  e.all = <ReverseFastGen-Aux (1) e.all>;
}

ReverseFastGen-Aux {
  (s.num)(#Atom s.type s.value) e.tail = (s.type s.value) <ReverseFastGen-Aux (s.num) e.tail>;
  (s.num)(#Brackets e.inBrackets) e.tail = 
    (#Brackets <ReverseFastGen-Aux (s.num) e.inBrackets>) <ReverseFastGen-Aux (s.num) e.tail>;
  (s.num)(s.mode) e.tail =
    (#TkVariable <Fetch s.mode { #E = 'e'; #T = 't'; #S = 's'; }> 'idx' s.num)
    <ReverseFastGen-Aux (<Inc s.num>) e.tail>;
  (s.num)(e.else) e.tail = (e.else) <ReverseFastGen-Aux (s.num) e.tail>;
  (s.num) = ;
}

$ENTRY ReversePattern {
  (#Atom s.type s.value) e.tail = (s.type s.value) <ReversePattern e.tail>;
  (#Brackets (e.inBrackets)) e.tail = 
    ( #Brackets <ReversePattern (e.inBrackets)> ) <ReversePattern e.tail>;
  (s.mode (e.name) e.any) e.tail =
    (#TkVariable <Fetch s.mode { #E = 'e'; #T = 't'; #S = 's'; }> e.name)
    <ReversePattern e.tail>;
  (e.else) e.tail = (e.else) <ReversePattern e.tail>;
   = ;
}
  
PreparePatternsFG-Aux {
  e.Pattern = 
    <Map
      {
        (e.type (e.idx) (( e.replacement)) ) = (e.type '$' ((e.replacement)) );
        (#Brackets e.inBrackets) = (#Brackets <PreparePatternsFG-Aux e.inBrackets>);
        (e.any) = (e.any);
      }
      e.Pattern
    >;
}

PreparePatternsFG {
  e.all = 
    <Map
      { (e.sent) = (<PreparePatternsFG-Aux e.sent>); }
      e.all
    >;
}

EraseBr {
  ( e.1 ) = e.1;
  e.1 = e.1;
}

FastGen-Terms {
  /* с #E переменной - все #E переменная */
  ((#E '$' e.pattern1 )) ((#E '$' e.pattern2 )) =
    (#E '$' e.pattern1 e.pattern2 );
    
  ((#E '$' e.pattern )) ((s.type e.body)) =
    (#E '$' e.pattern ((s.type e.body)) );
    
  ((s.type e.body)) ((#E '$' e.pattern)) =
    (#E '$' ((s.type e.body)) e.pattern );
  
  /* скобки с атомами */
  ((#Brackets e.1)) ((#Atom e.val)) =
    (#T '$' (( #Brackets e.1 )) (( #Atom e.val )) );
  
  ((#Atom e.val)) ((#Brackets e.1)) =
    (#T '$' ((#Atom e.val)) ((#Brackets e.1 )) );
  
  /* скобки с #S переменной */
  ((#S '$' e.pattern)) ((#Brackets e.body)) =
    (#T '$' ((#S '$' e.pattern)) ((#Brackets e.body)) );
  
  ((#Brackets e.body)) ((#S '$' e.pattern)) =
    (#T '$' ((#Brackets e.body)) ((#S '$' e.pattern)) );
  
  /* и там и там скобки, разбираем содержимое */
  ((#Brackets e.1)) ((#Brackets e.2)) =
    (#Brackets <EraseBr <FastGen (e.1 ) (e.2 )>>);
  
  /* скобки с #T переменной */
  ((#T '$' e.pattern)) ((#Brackets e.inBr)) =
    (#T '$' e.pattern (((#Brackets e.inBr))) );
    
  ((#Brackets e.inBr)) ((#T '$' e.pattern)) =
    (#T '$' (((#Brackets e.inBr))) e.pattern );
  
  /* Атом */
  ((#Atom e.val)) ((#Atom e.val)) = (#Atom e.val);
  
  ((#Atom e.val1)) ((#Atom e.val2)) = 
    (#S '$' ((#Atom e.val1)) ((#Atom e.val2)) );
  
  ((#Atom e.val)) ((#S '$' e.pattern)) =
    (#S '$' (( (#Atom e.val) )) e.pattern );
  
  ((#S '$' e.pattern)) ((#Atom e.val)) =
    (#S '$' e.pattern (( (#Atom e.val) )) );
  
  ((#Atom e.val)) ((#T '$' e.pattern)) =
    (#T '$' (( (#Atom e.val) )) e.pattern );
  
  ((#T '$' e.pattern)) ((#Atom e.val)) =
    (#T '$' e.pattern (( (#Atom e.val) )) );
  
  /* #T переменная */
  ((#T '$' e.pattern1)) ((#T '$' e.pattern2)) =
    (#T '$' e.pattern1 e.pattern2);
    
  ((#T '$' e.pattern1)) ((#S '$' e.pattern2)) =
    (#T '$' e.pattern1 e.pattern2);
    
  ((#S '$' e.pattern1)) ((#T '$' e.pattern2)) =
    (#T '$' e.pattern1 e.pattern2);
  
  /* #S переменная */
  
  ((#S '$' e.pattern1)) ((#S '$' e.pattern2)) =
    (#S '$' e.pattern1 e.pattern2 );
}

FastGen-MeN {
  (t.left1 e.1 (#E e.inE1) e.2 )(t.left2 e.3 (#E e.inE2) e.4 ) = 
    <FastGen-Terms (t.left1) (t.left2) > 
    <FastGen-MeN 
        (e.1 (#E e.inE1) e.2 )(e.3 (#E e.inE2) e.4 )
    >;
  
  (e.1 (#E e.inE1) e.2 t.right1)(e.3 (#E e.inE2) e.4 t.right2) = 
    <FastGen-MeN 
        (e.1 (#E e.inE1) e.2 )(e.3 (#E e.inE2) e.4 )
    >
    <FastGen-Terms (t.right1) (t.right2)>;
  
  ((#E '$' e.inE1)) ((#E '$' e.inE2)) = 
    (#E '$' ((e.inE1)) ((e.inE2)) );
  
  (e.in1)(e.in2) = 
    (#E '$' ((e.in1)) ((e.in2)) );
}

LengthComp {
  (t.1 e.tail1) (t.2 e.tail2) = <LengthComp (e.tail1) (e.tail2)>;
  () () = 1;
  e.1 = 0;
}

FastGen-K {
  1 (t.1 e.tail1) (t.2 e.tail2) = 
    <FastGen-Terms (t.1 ) (t.2 )> 
    <FastGen-K 1 (e.tail1) (e.tail2)>;
  1 () () = ;
  0 (e.1) (e.2) = (#E '$' ((e.1 )) ((e.2 )));
}

FastGen {
  /* 0. Тело функции состоит из одного предложения или из пустых образцов */
  (e.1) = (e.1);
  () () = ();
  
  /* 1. Предложения являются термами; cтроим БО согласно таблице */
  (t.1) (t.2) e.Tail = <FastGen (<FastGen-Terms (t.1) (t.2)>) e.Tail>;
  
  /* 2. Предложения класса (M,N) */
  ( e.1 (#E '$' (e.pattern1)) e.2 )
  ( e.3 (#E '$' (e.pattern2)) e.4 )
  e.Tail = 
    <FastGen 
      (<FastGen-MeN
        ( e.1 (#E '$' (e.pattern1)) e.2 )
        ( e.3 (#E '$' (e.pattern2)) e.4 )
      >)
      e.Tail
    >;
  
  /* 3. Предложения класса (K) */
  ( e.1 ) ( e.2 ) e.Tail = 
    <FastGen 
      (<FastGen-K 
        <LengthComp ( e.1 ) ( e.2 )> 
        ( e.1 ) ( e.2 )
      >) 
      e.Tail
    >;
  
  /* 4. Все остальное */ 
  (e.1) (e.2) = ((#E '$' ((e.1 )) ((e.2 )) ));
}



GetGeneralization {
  (e.scanned) (e.gen '$' e.rep) e.tail = <GetGeneralization (e.scanned (e.gen)) e.tail>;
  (e.scanned) (#Brackets e.inBrackets) e.tail = 
    <GetGeneralization (e.scanned (#Brackets <EraseBr <GetGeneralization () e.inBrackets>>)) e.tail>;
  (e.scanned) (e.gen) e.tail = <GetGeneralization (e.scanned (e.gen)) e.tail>;
  (e.scanned) = (e.scanned);
}

GetReplacement-Aux {
  (e.gen '$') e.tail = ;
  (#T '$' ((e.rep)) e.otherRep ) e.tail (e.scanned) (e.else) =
    <GetReplacement-Aux e.tail (e.scanned <BracketsPrepare e.rep>) (e.else ( #T '$' e.otherRep))>;
  (e.gen '$' ((e.rep)) e.otherRep ) e.tail (e.scanned) (e.else) =
    <GetReplacement-Aux e.tail (e.scanned e.rep) (e.else ( e.gen '$' e.otherRep))>;
  (#Brackets (e.rep) e.otherRep ) e.tail (e.scanned) (e.else) =
    <GetReplacement-Aux e.tail (e.scanned (#Brackets e.rep)) (e.else (#Brackets e.otherRep))>;
  (e.gen) e.tail (e.scanned) (e.else) = <GetReplacement-Aux e.tail (e.scanned (e.gen)) (e.else (e.gen))>;
  (e.scanned) (e.else) = (<ReversePattern e.scanned>) <GetReplacement e.else>;
}

GetReplacement {
  e.all =
    <GetReplacement-Aux e.all (/*scanned*/) (/*else*/)>;
}

BracketsPrepare {
  e.all =
    <Map
      {
        (#Brackets e.inBrackets) = 
          (#Brackets <GetReplacement <BracketsPrepare e.inBrackets>>);
        (e.any) = (e.any);
      }
      e.all
    >;
}

CreateFastGen-Aux {
  () = (())(());
  (e.all) = <GetGeneralization () e.all>(<GetReplacement <BracketsPrepare e.all>>);
}


$ENTRY CreateFastGen {
  e.patterns = 
    // <WriteLine 'pp\n'
      // <PreparePatternsFG
        // <CreateHardPattern e.patterns>
      // >
    // >
    // <WriteLine 'fg\n'
      // <FastGen
        // <PreparePatternsFG
          // <CreateHardPattern e.patterns>
        // >
      // >
    // >
    <CreateFastGen-Aux
      <FastGen
        <PreparePatternsFG
          <CreateHardPattern e.patterns>
        >
      >
    >;
}

$ENTRY GetFastGen {
  (#Atom #TkChar s.char) e.tail = '\'' s.char '\'' <GetFastGen e.tail>;
  (#Atom #TkNumber s.value) e.tail = '\'' s.value '\'' <GetFastGen e.tail>;
  (#Atom #TkName s.name) e.tail = '\'' s.name '\'' <GetFastGen e.tail>;
  (#Atom #TkIdentifier s.ident) e.tail = '\'' s.ident '\'' <GetFastGen e.tail>;
  (#Brackets e.in) e.tail = '('<GetFastGen e.in>')' <GetFastGen e.tail>;
  (e.name) e.tail = e.name <GetFastGen e.tail>;
  /* empty */ = /* empty */;
}