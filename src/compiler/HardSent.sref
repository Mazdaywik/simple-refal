
//FROM LibraryEx
$EXTERN Map, Fetch;

//FROM Library
$EXTERN WriteLine;


PreparePatternHardSent {
  // args   t.Token1 ... t.TokenN - One pattern
  // return t.Term1 ... t.TermN - Prepared pattern
  e.Pattern =
    <Map
      {
        (#TkChar s.char) = (#Atom #TkChar s.char);
        (#TkNumber s.value) = (#Atom #TkNumber s.value);
        (#TkName e.name) = (#Atom #TkName e.name);
        (#TkIdentifier e.ident) = (#Atom #TkIdentifier e.ident);
        (#TkVariable s.Mode e.Index) = 
          (<Fetch s.Mode { 'e' = #E; 't' = #T; 's' = #S; }> (e.Index) ());
        (#Brackets e.inBrackets) = (#Brackets <PreparePatternHardSent e.inBrackets>);
        (#ADT-Brackets (e.Name) e.inBrackets) =
          (#ADT-Brackets (e.Name) <PreparePatternHardSent e.inBrackets>);
        /* пусто */ = /* пусто */;
      }
      e.Pattern
    >;
}

CreateHardPattern-Aux {
  // args   t.Token1 ... t.TokenN - Prepared pattern
  // return t.Term1 ... t.TermN - Hard Sentence pattern

  /* предлажение имеет вид [P'] */
  (#ADT-Brackets (e.Name) e.body) ( e.tek_index ) = 
    (#ADT-Brackets (e.Name) <CreateHardPattern-Aux e.body ()>);
    
  /* отщипнуть терм слева или справа */
  (#ADT-Brackets (e.Name) e.body) e.smth ( e.tek_index ) = 
    (#ADT-Brackets (e.Name) <CreateHardPattern-Aux e.body ('l')>) 
    <CreateHardPattern-Aux e.smth ('r')>;
    
  e.smth (#ADT-Brackets (e.Name) e.body) ( e.tek_index ) = 
    <CreateHardPattern-Aux e.smth ('l')> 
    (#ADT-Brackets (e.Name) <CreateHardPattern-Aux e.body ('r')>);
    
  /* предлажение имеет вид (P') */
  (#Brackets e.body) ( e.tek_index ) = 
    (#Brackets <CreateHardPattern-Aux e.body ()>);
    
  /* отщипнуть терм слева или справа */
  (#Brackets e.body) e.smth ( e.tek_index ) = 
    (#Brackets <CreateHardPattern-Aux e.body ('l')>) 
    <CreateHardPattern-Aux e.smth ('r')>;
    
  e.smth (#Brackets e.body) ( e.tek_index ) = 
    <CreateHardPattern-Aux e.smth ('l')> 
    (#Brackets <CreateHardPattern-Aux e.body ('r')>);
  
  /* переменные */
  (#S (e.name) (e.pattern)) e.smth ( e.tek_index ) = 
    (#S('idx') ( ((#S (e.name) )) ))
    <CreateHardPattern-Aux e.smth ('r')>;
  
  e.smth (#S (e.name) (e.pattern)) ( e.tek_index ) = 
    <CreateHardPattern-Aux e.smth ('l')>
    (#S('idx') ( ((#S (e.name) )) ));
  
  (#T (e.name) (e.pattern)) e.smth ( e.tek_index ) = 
    (#T('idx') (( (#T (e.name)) )))
    <CreateHardPattern-Aux e.smth ('r')>;
  
  e.smth (#T (e.name) (e.pattern)) ( e.tek_index ) = 
    <CreateHardPattern-Aux e.smth ('l')>
    (#T('idx') ( ((#T (e.name))) ));
  
  /* атом */
  (#Atom e.attr) e.smth ( e.tek_index ) = 
    (#Atom e.attr)
    <CreateHardPattern-Aux e.smth ('r')>;
  
  e.smth (#Atom e.attr) ( e.tek_index ) = 
    <CreateHardPattern-Aux e.smth ('l')>
    (#Atom e.attr);
    
  /* пусто */
  ( e.tek_index ) = ;
  
  /* все остальное */
  e.smth ( e.tek_index ) = 
    (#E('idx') ((e.smth)) );
}

$ENTRY CreateHardPattern {
  // args   t.Token1 ... t.TokenN - One pattern
  // return [ (s.Tag ('idx')((Replacement)) ) / (#Atom s.Tag e.Value ) / (#Brackets e.inBrackets)]*
  //            Hard Sentence with replacments
  e.pattern =
    <CreateHardPattern-Aux <PreparePatternHardSent e.pattern> ('_')>;
}

$ENTRY HardPatternComment {
  // args   [ (s.Tag ('idx')((Replacement)) ) / (#Atom s.Tag e.Value ) / (#Brackets e.inBrackets)]*
  //        Hard Sentence with replacments
  // return Hard Sentence comment
  () = ;
  e.Pattern =
    <Map
      {
        (#Atom #TkChar s.Char) e.Tail = '\'' s.Char '\'' <HardPatternComment e.Tail>;
        (#Atom #TkNumber s.Value) e.Tail = s.Value <HardPatternComment e.Tail>;
        (#Atom #TkName e.Name) e.Tail = '&' e.Name <HardPatternComment e.Tail>;
        (#Atom #TkIdentifier e.Ident) e.Tail = '\"' e.Ident '\"' <HardPatternComment e.Tail>;
        (#Brackets e.inBrackets) e.Tail =
          (<HardPatternComment e.inBrackets>) <HardPatternComment e.Tail>;
        (#ADT-Brackets (e.Name) e.inBrackets) e.Tail =
          '['e.Name ' '<HardPatternComment e.inBrackets>']' <HardPatternComment e.Tail>;
        (s.Tag e.Any) e.Tail = s.Tag <HardPatternComment e.Tail>;
      }
      e.Pattern
    >;
  /* empty */ = /* empty */;
}