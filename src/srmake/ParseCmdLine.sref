//FROM GetOpt
$EXTERN GetOpt;

//FROM GetOpt-CheckRepeated
$EXTERN GetOpt-CheckRepeated;

//FROM LibraryEx
$EXTERN Fetch, Seq, MapReduce, Map;

/**
  <ParseCommandLine e.Arguments>
    == #Success
       (e.CppCompiler) (e.SrefCompiler) (e.FileName) (e.Flags) e.Folders
    == #Fails (s.ArgNum e.Message)*

  e.Folders ::= (s.FolderType e.Path)*
  s.FolderType ::= #Search | #Runtime
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <Fetch
      <GetOpt
        (
          (#CppCompiler #Required 'c' ('cpp-command'))
          (#SrefCompiler #Required 's' ('sref-command'))
          (#SearchFolder #Required 'd' ('dir') ('directory'))
          (#RuntimeFolder #Required 'D' ('runtime-dir') ('runtime-directory'))
          (#CompilerOption #Required 'X' ('thru') ('through'))
        )
        e.Arguments
      >
      <Seq
        {
          (e.Errors) e.Options =
            <GetOpt-CheckRepeated
              (#CppCompiler #SrefCompiler #FILE) (e.Errors) e.Options
            >;
        }
        {
          (e.Errors) e.Options-B (#CppCompiler s.Num e.Command) e.Options-E =
            (e.Errors) ((e.Command)) e.Options-B e.Options-E;

          (e.Errors) e.Options =
            (e.Errors (1 #NoCppCompiler)) (()) e.Options;
        }
        {
          (e.Errors) (e.Bag)
          e.Options-B (#SrefCompiler s.Num e.Command) e.Options-E =
            (e.Errors) (e.Bag (e.Command)) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options =
            (e.Errors) (e.Bag ('srefc-core')) e.Options;
        }
        {
          (e.Errors) (e.Bag)
          e.Options-B (#FILE s.Num e.FileName) e.Options-E =
            (e.Errors) (e.Bag (e.FileName)) e.Options-B e.Options-E;

          (e.Errors) (e.Bag) e.Options =
            (e.Errors (1 #NoSourceFile)) (e.Bag ()) e.Options;
        }
        {
          (e.Errors) (e.Bag) e.Options =
            (e.Errors)
            <MapReduce
              {
                ((e.CppCompiler) (e.SrefCompiler) e.Bag^)
                (#CompilerOption s.Num e.Flag) =
                  ((e.CppCompiler) (e.SrefCompiler ' "' e.Flag '"') e.Bag);

                (e.Bag^) t.OtherOption = (e.Bag) t.OtherOption;
              }
              (e.Bag) e.Options
            >;
        }
        {
          (e.Errors) (e.Bag) e.Options =
            (e.Errors) (e.Bag)
            <Map
              {
                (#SearchFolder s.Num e.Folder) = (#Search e.Folder);
                (#RuntimeFolder s.Num e.Folder) = (#Runtime e.Folder);
              }
              e.Options
            >;
        }
        {
          () ((e.CppCompiler) (e.SrefCompiler) (e.MainSource)) e.Folders =
            #Success (e.CppCompiler) (e.SrefCompiler) (e.MainSource) e.Folders;

          (e.Errors) (e.Bag) e.Folders =
            #Fails
            <Map
              {
                (s.Pos #NoRequiredParam e.Param) =
                  (s.Pos 'option ' e.Param ' expects parameter');

                (s.Pos #UnknownShortOption s.Option) =
                  (s.Pos 'unknown option -' s.Option);

                (s.Pos #UnknownLongOption e.Option) =
                  (s.Pos 'unknown option --' e.Option);

                // У нас все опции с параметрами, не должно возникать
                // (s.Pos #UnexpectedLongOptionParam (e.Option) e.Param) =

                (s.Pos #RepeatOption s.Tag) =
                  (
                    s.Pos
                    <Fetch
                      s.Tag {
                        #CppCompiler = 'option -c or --cpp-command';
                        #SrefCompiler = 'option -s or --sref-command';
                        #FILE = 'source filename';
                      }
                    >
                    ' must appear one time'
                  );

                (s.Pos #NoCppCompiler) =
                  (s.Pos 'option -c or --cpp-command not found');

                (s.Pos #NoSourceFile) =
                  (s.Pos 'expected source filename in command line');
              }
              e.Errors
            >;
        }
      >
    >;
}
