//FROM Library
$EXTERN WriteLine, System, StrFromInt, Exit;

//FROM LibraryEx
$EXTERN ArgList, Map;

//FROM FileScanner
$EXTERN CreateFileList;

//FROM ParseCmdLine
$EXTERN ParseCommandLine;

$ENTRY Go { = <Main <ArgList>>; }

Main {
  (e.Program) =
    <WriteLine 'Usage:'>
    <WriteLine
      '  srmake [-s path\\to\\srefc.exe] -c c++compiler {-d search-dir} MainFileName[.sref]'
    >;

  (e.Program) e.Arguments =
    <MakeProject
      <ParseCommandLine e.Arguments>
    >;
}

MakeProject {
  #Success (e.CppCompiler) (e.SrefCompiler) (e.SourceFile) e.Folders =
    <Make
      (e.SrefCompiler) (e.CppCompiler) (e.Folders)
      <CreateFileList
        (
          <Map
            {
              (s.FolderTag e.Folder) = (e.Folder);
            }
            e.Folders
          >
        )
        e.SourceFile
      >
    >;

  #Fails e.Errors =
    <Map
      {
        (s.Pos e.Message) =
          <WriteLine
            'Command line argument ' <StrFromInt s.Pos> ': ' e.Message
          >;
      }
      e.Errors
    >
    <Exit 1>;
}

Make {
  (e.SrefC) (e.CompilerCommand) (e.Directories)
  e.Units-B (#NotFound e.UnitName) e.Units-E =
    <Map
      {
        (#NotFound e.UnitName^) =
          <WriteLine
            'COMMAND LINE ERROR: Unit ' e.UnitName ' not found'
          >;

        (#Output e.Output) = ;
        (#Source (e.Source) e.Output) = ;
      }
      (#NotFound e.UnitName) e.Units-E
    >
    <Exit 1>;

  (e.SrefC) (e.CompilerCommand) (e.Directories) e.Units =
    <System
      e.SrefC ' -c "' e.CompilerCommand '"'
      <Map
        {
          (#Search e.Folder) = ' -d "' e.Folder '"';
          (#Runtime e.Folder) = ' -D "' e.Folder '"';
        }
        e.Directories
      >
      <Map
        {
          (#Output e.Output) = ' "' e.Output '"';
          (#Source (e.Source) e.Output) = ' "' e.Source '"';
        }
        e.Units
      >
    >;
}
