$EENUM GN-Local, GN-Entry;

FuncArguments {
  = 'refalrts::Iter arg_begin, refalrts::Iter arg_end';
}

NakedArguments {
  = 'refalrts::Iter, refalrts::Iter';
}

TextFromMemoryClass {
  GN-Local = 'static '; GN-Entry = ;
}

SwGenFnStart {
  s.MemoryClass s.FnArguments e.Name =
    (
      <TextFromMemoryClass s.MemoryClass>
      'refalrts::FnResult ' e.Name '(' <s.FnArguments> ') {'
    )
    ('  refalrts::this_is_generated_function();');
}

$ENTRY GenFnStart {
  s.MemoryClass e.Name =
    <SwGenFnStart s.MemoryClass FuncArguments e.Name>;
}

$ENTRY GenFnEnd {
  =
    ('  return refalrts::FnResult(')
    ('    refalrts::cRecognitionImpossible | (__LINE__ << 8)')
    ('  );')
    ('}') ();
}

$ENTRY GenEEnum {
  e.Name = <SwGenFnStart GN-Entry NakedArguments e.Name> <GenFnEnd>;
}

$ENTRY GenEnum {
  e.Name = <SwGenFnStart GN-Local NakedArguments e.Name> <GenFnEnd>;
}

$ENTRY GenExtern {
  e.Name =
    ('extern refalrts::FnResult ' e.Name '(' <FuncArguments> ');') ();
}

$ENTRY GenForward {
  e.Name =
    ('static refalrts::FnResult ' e.Name '(' <FuncArguments> ');') ();
}

$FORWARD GenSwap-Aux;

$ENTRY GenESwap {
  e.Name =
    ('//$ESWAP ' e.Name)
    <GenSwap-Aux GN-Entry e.Name>;
}

$ENTRY GenSwap {
  e.Name =
    ('//$SWAP ' e.Name)
    <GenSwap-Aux GN-Local e.Name>;
}

GenSwap-Aux {
  s.MemoryClass e.Name =
    <GenFnStart s.MemoryClass e.Name>
    ('  refalrts::Iter func_name = arg_begin;')
    ()
    ('  refalrts::move_left( func_name, arg_end );')
    ()
    ('  refalrts::Iter info_b = func_name;')
    ('  refalrts::Iter info_e = arg_end;')
    ()
    ('  refalrts::move_left( info_b, info_e );')
    ('  refalrts::move_right( info_b, info_e );')
    ()
    ('  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );')
    ()
    ('  refalrts::Iter saved_b;')
    ('  refalrts::Iter saved_e;')
    ()
    ('  refalrts::swap_info_bounds( saved_b, saved_e, s_head );')
    ('  refalrts::splice_evar( arg_begin, saved_b, saved_e );')
    ('  refalrts::swap_save( s_head, info_b, info_e );')
    ('  refalrts::splice_to_freelist( arg_begin, arg_end );')
    ()
    ('  return refalrts::cSuccess;')
    ('}')
    ();
}

$ENTRY GenIdent {
  e.Name =
    ('//$LABEL ' e.Name)
    ('template <typename T>')
    ('struct ' e.Name ' {')
    ('  static const char *name() {')
    ('    return "' e.Name '";')
    ('  }')
    ('};')
    ();
}

$ENTRY GenCommonHeaders {
  = ('// Automatically generated file. Don\'t edit!')
  ('#include "refalrts.h"')
  () ();
}

$ENTRY GenCommonTailer {
  = () ('//End of file');
}

// Команды и их подтипы
//FROM Algorithm
$EXTERN
  CmdInitB0,
  CmdChar, CmdNumber, CmdName, CmdIdent,
  CmdBrackets, CmdADT, CmdEmpty,
  CmdRepeated, CmdVar, CmdClosedE,
  CmdOpenedE-Start, CmdOpenedE-End,
  CmdAllocateElem, CmdLinkBrackets, CmdPushStack,
  CmdInsertElem, CmdInsertVar,
  ElChar, ElName, ElNumber, ElIdent,
  ElOpenADT, ElCloseADT,
  ElOpenBracket, ElCloseBracket,
  ElOpenCall, ElCloseCall,
  CmdEmptyResult, CmdReturnResult,
  CmdIfDef, CmdElse, CmdEndIf,
  CmdInitRAA, CmdFinRAA,
  CmdDeclareEVar, CmdDeclareVar,
  CmdCopyEVar, CmdCopyVar,
  AlgLeft, AlgRight,
  CmdComment, CmdSave,
  CmdArrChar, CmdArrInt, CmdArrFunc, CmdArrIdent,
  CmdArrOB, CmdArrCB, CmdArrOADT, CmdArrCADT,
  CmdArrOC, CmdArrCC, CmdArrSplice, CmdArrCopy, CmdIssueMem,
  CmdSetBound, CmdBoundToLeft, CmdBoundToRight,
  CmdBoundEmptySeq,
  CmdiContextSet, CmdiVar,
  CmdiNum, CmdiIdent, CmdiADT,
  CmdiName, CmdiChar, CmdiRepeat,
  CmdiSave, CmdiEStart, CmdiEStop,
  CmdiResult, CmdiPattern,
  CmdiBracket, CmdiEmpty,
  CmdiFuncArray, CmdiLabelArray;

$FORWARD GenCommand, BracketsVar-B, BracketsVar-E, BracketsVars;

//FROM LibraryEx
$EXTERN Map, MapReduce, Fetch, Add;

//FROM Library
$EXTERN StrFromInt, WriteLine;

$FORWARD GenBracketName;

$ENTRY GenSentence {
  e.Algorithm =
    ('  do {')
    <Fetch
      <MapReduce GenCommand ('    ' /* отступ */) e.Algorithm>
      {
        ('    ') /* отступ должен остаться тем же */
        e.Generated =
          e.Generated;
      }
    >
    ('  } while ( 0 );')
    ();
}

BracketsVar-B {
  s.BracketNumber = 'context[' <StrFromInt s.BracketNumber> ']';
}

//FROM Library
$EXTERN Inc;

BracketsVar-E {
  s.BracketNumber = 'context[' <StrFromInt <Inc s.BracketNumber>> ']';
}

BracketsVars {
  s.BracketNumber =
    <BracketsVar-B s.BracketNumber> ', ' <BracketsVar-E s.BracketNumber>;
}

BracketsVarsRefs {
  s.BracketNumber =
    '& ' <BracketsVar-B s.BracketNumber> ', '
    '& ' <BracketsVar-E s.BracketNumber>;
}

GenBracketName {
  s.Number =
    '__bracket_' s.Number
  ;
}

/*
  Величина отступа также определяет режим работы. Отступ в 4 пробела --
  вне цикла по открытой e-переменной, отступ больше -- внутри оного цикла.
*/

$FORWARD PrintVar, PrintEVar-B, PrintEVar-E, PrintEVars,
  PrintMatchChar, PrintMatchNumber, PrintMatchName,
  PrintMatchIdent,
  PrintMatchADT,
  PrintMatchBrackets,
  PrintMatchEmpty,
  PrintMatchSTVar, PrintMatchRepeated,
  PrintAllocateElem, PrintElemVar;

$FORWARD Escape;

//FROM LibraryEx
$EXTERN Dec;

$LABEL CCreateClosure;

PrintName {
  # CCreateClosure = 'refalrts::create_closure';

  e.Name = e.Name;
}

PrintDebug {
  s.Usings s.Mode e.Index s.Depth =
    'varInfo:: ' 'Mode[' s.Mode '] Index ['e.Index '] Depth[' <StrFromInt s.Depth> '] Usings[' <StrFromInt s.Usings> ']';
}


PrintVarShortcut {
  s.Usings s.Mode e.Index s.Depth =
    '__' s.Mode e.Index '_' <StrFromInt s.Depth> '_' <StrFromInt s.Usings>;
}

PrintLocFromShortcut {
  s.Usings 'e' e.Index s.Depth = 'context[' <PrintVarShortcut s.Usings 'e' e.Index s.Depth> '], '
                                 'context[' <PrintVarShortcut s.Usings 'e' e.Index s.Depth> ' + 1]';
  s.Usings s.Mode e.Index s.Depth = 'context[' <PrintVarShortcut s.Usings s.Mode e.Index s.Depth> ']';
}

PrintELocShortcut-B {
  s.Usings s.Mode e.Index s.Depth =
    'context[' <PrintVarShortcut s.Usings s.Mode e.Index s.Depth> ']';
}

PrintELocShortcut-E {
  s.Usings s.Mode e.Index s.Depth =
    'context[' <PrintVarShortcut s.Usings s.Mode e.Index s.Depth> ' + 1]';
}

PrintConstShortcutDecl {
  s.Number e.VarInfo =
    'enum { ' <PrintVarShortcut e.VarInfo> ' = '
    <StrFromInt s.Number> ' };'
  ;
}

PrintBracketsVarInit {
  e.Indent s.InnerBrackets =
    (e.Indent <BracketsVar-B s.InnerBrackets> ' = 0;')
    (e.Indent <BracketsVar-E s.InnerBrackets> ' = 0;')
    ;
}

PrintDirection {
  AlgLeft = 'Left';
  AlgRight = 'Right';
}

PrintRepeatInterp {
  (e.Indent) s.Direction s.BracketNumber s.Usings s.Mode e.Index =
    (e.Indent '{refalrts::ic' s.Mode 'Repeat' <PrintDirection s.Direction> ', '
              '(void*)' <PrintVarShortcut s.Usings s.Mode e.Index> ', '
              '(void*)' <PrintVarShortcut <Dec s.Usings> s.Mode e.Index> ', 0, '
              <StrFromInt s.BracketNumber> '},'
    )
    ;
}

GenCommand {
  (e.Indent) (CmdComment e.Text) = (e.Indent) (e.Indent '//' e.Text);

  (e.Indent) (CmdInitB0) =
    (e.Indent)
    (e.Indent <BracketsVar-B 0> ' = arg_begin;')
    (e.Indent <BracketsVar-E 0> ' = arg_end;')
    (e.Indent 'refalrts::move_left( ' <BracketsVars 0> ' );')
    (e.Indent 'refalrts::move_left( ' <BracketsVars 0> ' );')
    (e.Indent 'refalrts::move_right( ' <BracketsVars 0> ' );')
    ;

  (e.Indent) (CmdDeclareEVar s.Number e.VarInfo) =
    (e.Indent)
    (e.Indent <PrintConstShortcutDecl s.Number e.VarInfo> )
    (e.Indent 'static refalrts::Iter ' <PrintEVar-B e.VarInfo> ';')
    (e.Indent 'static refalrts::Iter ' <PrintEVar-E e.VarInfo> ';')
    (e.Indent) (e.Indent '//' 'debug ::' <PrintDebug e.VarInfo>)
    ;

  (e.Indent) (CmdDeclareVar s.Number e.VarInfo) =
    (e.Indent)
    (e.Indent <PrintConstShortcutDecl s.Number e.VarInfo> )
    (e.Indent 'static refalrts::Iter ' <PrintVar e.VarInfo> ';')
    (e.Indent) (e.Indent '//' 'debug ::' <PrintDebug e.VarInfo>)
    ;

  (e.Indent) (CmdChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (CmdNumber s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PrintMatchNumber (e.Indent) s.Direction s.BracketNumber s.Number>
    ;

  (e.Indent) (CmdName s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (CmdIdent s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchIdent (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (CmdBrackets s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchBrackets (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>
    ;

  (e.Indent) (CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >
    ;

  (e.Indent) (CmdEmpty s.Direction s.BracketNumber) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNumber>
    ;

  (e.Indent) (CmdVar s.Direction s.BracketNumber s.Mode e.Info) =
    (e.Indent)
    <PrintMatchSTVar (e.Indent) s.Direction s.BracketNumber s.Mode e.Info>
    ;

  (e.Indent) (CmdRepeated s.Direction s.BracketNumber e.VarInfo) =
    (e.Indent)
    // in progress
    <PrintMatchRepeated (e.Indent) s.Direction s.BracketNumber e.VarInfo>
    ;

  (e.Indent) (CmdClosedE AlgLeft s.BracketNumber 'e' e.Index) =
    (e.Indent)
    (e.Indent
      <PrintEVar-B 1 'e' e.Index> ' = ' <BracketsVar-B s.BracketNumber> ';'
    )
    (e.Indent
      <PrintEVar-E 1 'e' e.Index> ' = ' <BracketsVar-E s.BracketNumber> ';'
    )
    //new
    // (e.Indent
    //   <PrintELocShortcut-B 1 'e' e.Index> ' = ' <BracketsVar-B s.BracketNumber> ';'
    // )
    // (e.Indent
    //   <PrintELocShortcut-E 1 'e' e.Index> ' = ' <BracketsVar-E s.BracketNumber> ';'
    // )
    // brackets level
    // (e.Indent
    //   'const int ' <GenBracketName s.BracketNumber> ' = '
    //   <PrintVarShortcut 1 'e' e.Index> ';'
    // )
    ;

  (e.Indent) (CmdiContextSet s.BracketNumber 'e' e.Index) =
    (e.Indent)
    (e.Indent '{refalrts::icContextSet, '
              '0, 0, '
              <PrintVarShortcut 1 'e' e.Index>
              ', ' <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent)
  (CmdOpenedE-Start AlgLeft s.BracketNumber 'e' e.Index) =
    (e.Indent '  ')
    (e.Indent <PrintEVar-B 1 'e' e.Index> ' = 0;')
    (e.Indent <PrintEVar-E 1 'e' e.Index> ' = 0;')
    (e.Indent 'do {')
    ;

  (e.Indent '  ')
  (CmdOpenedE-End AlgLeft s.BracketNumber 'e' e.Index) =
    (e.Indent)
    (e.Indent
      '} while ( refalrts::open_evar_advance( '
      <PrintEVars 1 'e' e.Index> ', ' <BracketsVars s.BracketNumber>
      ' ) );'
    )
    ;

  (e.Indent) (CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent
      <BracketsVar-B s.NewBracketNumber>
      ' = ' <BracketsVar-B s.OldBracketNumber> ';'
    )
    (e.Indent
      <BracketsVar-E s.NewBracketNumber>
      ' = ' <BracketsVar-E s.OldBracketNumber> ';'
    )
    ;

  (e.Indent) (CmdEmptyResult) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator();')
    (e.Indent 'refalrts::Iter res = arg_begin;');

  (e.Indent) (CmdCopyEVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'if( ! refalrts::copy_evar( ' <PrintEVars s.Usings 'e' e.Index> ', '
      <PrintEVars <Dec s.Usings> 'e' e.Index> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (CmdCopyVar s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'if( ! refalrts::copy_stvar( ' <PrintVar s.Usings s.Mode e.Index> ', '
      <PrintVar <Dec s.Usings> s.Mode e.Index> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (CmdAllocateElem s.ElemNumber e.ElemInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.ElemNumber> ' = 0;')
    <PrintAllocateElem (e.Indent) s.ElemNumber e.ElemInfo>;

  (e.Indent) (CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::link_brackets( '
      <PrintElemVar s.Left> ', ' <PrintElemVar s.Right>
      ' );'
    );

  (e.Indent) (CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'refalrts::push_stack( ' <PrintElemVar s.ElemNumber> ' );');

  (e.Indent) (CmdInsertElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_elem( res, ' <PrintElemVar s.ElemNumber> ' );'
    );

  (e.Indent) (CmdInsertVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <PrintEVars s.Usings 'e' e.Index> ' );'
    );

  (e.Indent) (CmdInsertVar s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_stvar( res, '
      <PrintVar s.Usings s.Mode e.Index> ' );'
    );

  (e.Indent) (CmdReturnResult) =
    (e.Indent)
    (e.Indent 'refalrts::use( res );')
    (e.Indent 'refalrts::splice_to_freelist( arg_begin, arg_end );')
    (e.Indent 'return refalrts::cSuccess;');

  (e.Indent) (CmdIssueMem s.Number) =
    (e.Indent) (e.Indent '// issue here memory for vars with ' <StrFromInt s.Number> ' elems')
    (e.Indent 'refalrts::Iter context[' <StrFromInt s.Number> '];')
    (e.Indent 'refalrts::zeros( context, ' <StrFromInt s.Number> ' );')
    ;

  (e.Indent) (CmdIfDef) =
    (e.Indent) ('#ifdef INTERPRET');

  (e.Indent) (CmdElse) =
    (e.Indent) ('#else');

  (e.Indent) (CmdEndIf) =
    (e.Indent) ('#endif');

  (e.Indent) (CmdSetBound) =
    (e.Indent)
    (e.Indent '{refalrts::icBoundSet, arg_begin, arg_end, 0},')
    ;

  (e.Indent) (CmdiFuncArray e.FuncNames) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalFunction functions[] = {')
    <Map
      {
        (e.Name) =
          (e.Indent
            '  { & ' <PrintName e.Name> ', "' <PrintName e.Name> '" },'
          );
      }
      e.FuncNames
    >
    (e.Indent '  { 0, 0 }')
    (e.Indent '};');

  (e.Indent) (CmdiLabelArray e.LabelNames) =
    (e.Indent)
    (e.Indent 'static const refalrts::RefalIdentifier labels[] = {')
    <Map
      {
        (e.Name) = (e.Indent '  & ' e.Name '<int>::name,');
      }
      e.LabelNames
    >
    (e.Indent '  0')
    (e.Indent '};');

  (e.Indent) (CmdiPattern) =
    (e.Indent)
    (e.Indent '{refalrts::icPattern, 0, 0, 0, 0},')
    ;

  (e.Indent) (CmdiResult) =
    (e.Indent)
    (e.Indent '{refalrts::icResult, 0, 0, 0, 0},')
    ;

  (e.Indent) (CmdiRepeat s.Direction s.BracketNumber e.VarInfo) =
    (e.Indent)
    <PrintRepeatInterp (e.Indent) s.Direction s.BracketNumber e.VarInfo>
    ;

  (e.Indent) (CmdiEStop) =
    (e.Indent)
    (e.Indent '{refalrts::icEStop, 0, 0, 0, 0},')
    ;

  (e.Indent) (CmdiEStart s.BracketNumber 'e' e.Index) =
    (e.Indent)
    (e.Indent '{refalrts::icEPush, 0, 0, 0, ' <StrFromInt s.BracketNumber> '},')
    (e.Indent '{refalrts::icEStart, 0, 0, '
              <PrintVarShortcut 1 'e' e.Index>
              ', 0},'
    )
    ;

  (e.Indent) (CmdiADT s.Direction s.BracketNumber s.InnerBrackets s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icADT' <PrintDirection s.Direction> ', '
              '0, 0, '
              '(' <StrFromInt s.NameId> ' << 16) | '
                <StrFromInt s.InnerBrackets> ', '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (CmdiSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent '{refalrts::icEPush, 0, 0, 0, ' <StrFromInt s.OldBracketNumber> '},')
    (e.Indent '{refalrts::icSave, '
              <BracketsVarsRefs s.NewBracketNumber> ', 0},'
    )
    ;

  (e.Indent) (CmdiChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    (e.Indent '{refalrts::icChar' <PrintDirection s.Direction> ', '
              <BracketsVarsRefs s.BracketNumber>
              ', (int)' '' <Escape s.Char> '' ', 0},'
    )
    ;

  (e.Indent) (CmdiVar s.Direction s.BracketNumber s.Mode e.Info) =
    (e.Indent)
    (e.Indent '{refalrts::ic' s.Mode 'Var' <PrintDirection s.Direction> ', '
              <BracketsVarsRefs s.BracketNumber>
              ', '
              <PrintVarShortcut 1 s.Mode e.Info>
              ', 0},'
    )
    ;

  (e.Indent) (CmdiName s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icFunc' <PrintDirection s.Direction> ', 0, 0, '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.BracketNumber> '},'
    )
  ;

  (e.Indent) (CmdiIdent s.Direction s.BracketNumber s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icIdent' <PrintDirection s.Direction> ', '
              '0, 0, '
              <StrFromInt s.NameId> ', '
              <StrFromInt s.BracketNumber> '},'
    )
    ;

  (e.Indent) (CmdiNum s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    (e.Indent '{refalrts::icEPush, 0, 0, 0, ' <StrFromInt s.BracketNumber> '},')
    (e.Indent '{refalrts::icNum' <PrintDirection s.Direction> ', '
              '(void*)' s.Number ', '
              '0, 0},'
    )
    ;

  (e.Indent) (CmdInitRAA) =
    (e.Indent '  ')
    (e.Indent 'static refalrts::ResultAction raa[] = {');

  (e.Indent '  ') (CmdFinRAA) =
    (e.Indent)
    (e.Indent '  {refalrts::icEnd}')
    (e.Indent '};')
    (e.Indent
      'refalrts::Iter allocs[2*sizeof(raa)/sizeof(raa[0])];'
    )
    (e.Indent '//'
      'refalrts::FnResult res = '
      'refalrts::interpret_array( raa, allocs, arg_begin, arg_end );'
    )
    (e.Indent '// new engine')
    (e.Indent
      'refalrts::FnResult res = '
      'refalrts::new_interpret_array( '
      'raa, allocs, context, arg_begin, arg_end, '
      'sizeof(context)/sizeof(context[0]), '
      'functions, labels );'
    )
    (e.Indent 'if ( res == refalrts::cPatternMismatch )')
    (e.Indent '  break;')
    (e.Indent 'else')
    (e.Indent '  return res;');

  (e.Indent) (CmdArrChar s.Value) =
    (e.Indent)
    (e.Indent '{refalrts::icChar, 0, 0, \'' <Escape s.Value> '\', 0},');

  (e.Indent) (CmdArrFunc s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icFunc, 0, 0, ' <StrFromInt s.NameId> ', 0},');

  (e.Indent) (CmdiBracket s.Direction s.Num s.NumRanges) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket' <PrintDirection s.Direction> ', '
              '0, 0, ' <StrFromInt s.NumRanges> ', ' <StrFromInt s.Num> '},'
    )
    ;

  (e.Indent) (CmdiEmpty s.Num) =
    (e.Indent)
    (e.Indent '{refalrts::icEmpty, 0, 0, 0, ' <StrFromInt s.Num> '},')
    ;

  (e.Indent) (CmdArrInt s.Number) =
    (e.Indent)
    (e.Indent '{refalrts::icInt, 0, 0, ' s.Number ', 0},');

  (e.Indent) (CmdArrIdent s.NameId) =
    (e.Indent)
    (e.Indent '{refalrts::icIdent, 0, 0, ' <StrFromInt s.NameId> ', 0},');

  (e.Indent) (CmdArrOB) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket, 0, 0, refalrts::ibOpenBracket, 0},');

  (e.Indent) (CmdArrCB) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket, 0, 0, refalrts::ibCloseBracket, 0},');

  (e.Indent) (CmdArrOADT) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket, 0, 0, refalrts::ibOpenADT, 0},');

  (e.Indent) (CmdArrCADT) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket, 0, 0, refalrts::ibCloseADT, 0},');

  (e.Indent) (CmdArrOC) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket, 0, 0, refalrts::ibOpenCall, 0},');

  (e.Indent) (CmdArrCC) =
    (e.Indent)
    (e.Indent '{refalrts::icBracket, 0, 0, refalrts::ibCloseCall, 0},');

  // (e.Indent) (CmdArrCopy 'e' e.Index) =
  //   (e.Indent)
  //   (e.Indent
  //     '{refalrts::icCopyEVar, '
  //     '& ' <PrintEVar-B 1 'e' e.Index> ', '
  //     '& ' <PrintEVar-E 1 'e' e.Index> '},'
  //   );

  (e.Indent) (CmdArrCopy 'e' e.Index) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCopyEVar, 0, 0, '
      <PrintVarShortcut 1 'e' e.Index>
      ', 0},'
    );

  // (e.Indent) (CmdArrCopy s.Mode e.Index) =
  //   (e.Indent)
  //   (e.Indent
  //     '{refalrts::icCopySTVar, & ' <PrintVar 1 s.Mode e.Index> '},'
  //   );

  (e.Indent) (CmdArrCopy s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      '{refalrts::icCopySTVar, 0, 0, ' <PrintVarShortcut 1 s.Mode e.Index> ', 0},'
    );

  // (e.Indent) (CmdArrSplice s.Usings 'e' e.Index) =
  //   (e.Indent)
  //   (e.Indent
  //     '{refalrts::icSpliceEVar, '
  //     '& ' <PrintEVar-B s.Usings 'e' e.Index> ', '
  //     '& ' <PrintEVar-E s.Usings 'e' e.Index> '},'
  //   );

    (e.Indent) (CmdArrSplice s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      '{refalrts::icSpliceEVar, 0, 0, '
      <PrintVarShortcut s.Usings 'e' e.Index> ', 0},'
    );

  (e.Indent) (CmdArrSplice s.Usings s.Mode e.Index) =
    // (e.Indent)
    // (e.Indent
    //   '{refalrts::icSpliceSTVar, & ' <PrintVar s.Usings s.Mode e.Index> '},'
    // );
  (e.Indent)
    (e.Indent
      '{refalrts::icSpliceSTVar, 0, 0, ' <PrintVarShortcut s.Usings s.Mode e.Index> ', 0},'
    );
}

PrintVar {
  s.Usings s.Mode e.Index s.Depth =
    s.Mode e.Index '_' <StrFromInt s.Depth> '_' <StrFromInt s.Usings>;
}

PrintEVar-B {
  s.Usings s.Mode e.Index s.Depth =
    s.Mode e.Index '_' <StrFromInt s.Depth> '_b_' <StrFromInt s.Usings>;
}

PrintEVar-E {
  s.Usings s.Mode e.Index s.Depth =
    s.Mode e.Index '_' <StrFromInt s.Depth> '_e_' <StrFromInt s.Usings>;
}

PrintEVars {
  s.Usings s.Mode e.Index =
    <PrintEVar-B s.Usings s.Mode e.Index> ', '
    <PrintEVar-E s.Usings s.Mode e.Index>;
}

$FORWARD PrintMatch;

Escape {
  '\n' = '\\n';
  '\t' = '\\t';
  '\r' = '\\r';
  '\\' = '\\\\';
  '' = '\\' '';
  s.Other = s.Other;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNumber s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('char') '' <Escape s.Char> ''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNumber s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('number') <StrFromInt s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('function') '& ' e.Name
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('ident') ' & ' e.Name '<int>::name'
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('brackets')
      <BracketsVars s.InnerNum>
    >;
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('adt')
      <BracketsVars s.InnerNum> ', '
      '& ' e.Name
    >;
}

BreakerFromIndent {
  '    ' = 'break;';

  e.OtherIndent = 'continue;';
}

PrintMatchEmpty {
  (e.Indent) s.BracketNumber =
    (e.Indent
      'if( ! refalrts::empty_seq( ' <BracketsVars s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

StrFromDirection {
  AlgLeft = 'left'; AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNumber s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      //<WriteLine 'Testing match STVAR: ' e.Index>
      (<VarMatchFunction s.Mode>) <PrintVar 1 s.Mode e.Index>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNumber s.Usings 'e' e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_evar')
      <PrintEVars s.Usings 'e' e.Index> ', '
      <PrintEVars <Dec s.Usings> 'e' e.Index>
    >;

  (e.Indent) s.Direction s.BracketNumber s.Usings s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_stvar') <PrintVar s.Usings s.Mode e.Index>
      ', ' <PrintVar <Dec s.Usings> s.Mode e.Index>
    >;
}

PrintMatch {
  (e.Indent) s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <BracketsVars s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintElemVar {
  s.Number = 'n' <StrFromInt s.Number>;
}

$FORWARD PrintAllocate-Aux, SwAllocator, SwInfo;

PrintAllocateElem {
  (e.Indent) s.ElemNumber s.ElementType e.Info =
    <PrintAllocate-Aux
      (e.Indent) s.ElemNumber
      ( <SwAllocator s.ElementType> )
      ( <SwInfo s.ElementType e.Info> )
    >
    (e.Indent '  return refalrts::cNoMemory;');
}

PrintAllocate-Aux {
  (e.Indent) s.ElemNumber (e.Constructor) (e.Value) =
    (e.Indent
      'if( ! refalrts::' e.Constructor '( ' <PrintElemVar s.ElemNumber>
      e.Value ' ) )'
    );
}

SwAllocator {
  ElChar = 'alloc_char';
  ElName = 'alloc_name';
  ElNumber = 'alloc_number';
  ElIdent = 'alloc_ident';

  ElOpenADT = 'alloc_open_adt';
  ElCloseADT = 'alloc_close_adt';

  ElOpenBracket = 'alloc_open_bracket';
  ElCloseBracket = 'alloc_close_bracket';

  ElOpenCall = 'alloc_open_call';
  ElCloseCall = 'alloc_close_call';
}

SwInfo {
  ElChar s.Char = ', ' '' <Escape s.Char> '';

  ElName e.Name = ', & ' <PrintName e.Name> ', "' <PrintName e.Name> '"';

  ElNumber s.Number = ', ' <StrFromInt s.Number> 'UL';

  ElIdent e.Name = ', & ' e.Name '<int>::name';

  // Остальное -- скобки
  s.Other = ;
}
