$FORWARD GeneralizeResult, GenPattern, GenResult;

$ENTRY MakeAlgorithm {
  (e.Pattern) (e.Result) =
    <GeneralizeResult
      <GenPattern e.Pattern>
      <GenResult e.Result>
    >;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

//FROM Lexer
$EXTERN
  TkOpenBracket, TkCloseBracket, TkOpenADT, TkCloseADT,
  TkName, TkNumber, TkVariable, TkChar;

//FROM LibraryEx
$EXTERN Inc;

// Направление распознавания
$EENUM AlgLeft, AlgRight;

/*
  Тип идентификатора следует сделать доступным
  и из Driver'а, и из Generator'а.
  Остаётся только импортировать отсюда.
*/
$EENUM TkIdentifier;

/*
Команды распознавания
  Литералы, формат (Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (CmdBrackets s.Direction s.BracketNum s.InnerNum)
  АТД, формат
    (CmdADT s.Direction s.BracketNum s.InnerNum e.Name)
  Пустые скобки, формат (CmdEmpty AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (CmdRepeated s.Direction s.BracketNum s.Usings s.Mode e.Index)
    новые s и t, формат (CmdVar s.Direction s.BracketNum s.Mode e.Index)
    открытые e:
      первоначальный формат (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index)
      после обработки:
        (CmdOpenedE-Start AlgLeft s.BracketNum 'e' e.Index)
        (CmdOpenedE-End AlgLeft s.BracketNum 'e' e.Index)
    закрытые e, формат
      (CmdClosedE AlgLeft s.BracketNum 'e' e.Index (e.BracketsForSave))
  Команды сохранения скобок
    (CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (CmdComment e.Text)
*/
$EENUM
  CmdChar, CmdNumber, CmdName, CmdIdent,
  CmdBrackets, CmdADT, CmdEmpty,
  CmdRepeated, CmdVar, CmdClosedE,
  CmdOpenedE-Start, CmdOpenedE-End,
  CmdComment, CmdSave, CmdIssueMem,
  CmdSetBound, CmdBoundToLeft, CmdBoundToRight,
  CmdBoundEmptySeq,
  CmdiMoveLeft, CmdiMoveRigth,
  CmdiContextSet, CmdiVar,
  CmdiBracket,
  CmdiNum, CmdiIdent, CmdiADT,
  CmdiName, CmdiChar,
  CmdiRepeat, CmdiSave,
  CmdiEStart, CmdiEStop,
  CmdiEmpty;

$ENUM CmdOpenedE;

$FORWARD DoGenPattern, TextFromPattern, SaveBrackets;

//FROM LibraryEx
$EXTERN Fetch;

GenPattern {
  e.Pattern =
    <Fetch
      <DoGenPattern
        1 (0 e.Pattern) (/* vars */) (/* commands */)
      >
      {
        s.NumRanges (e.Vars) e.Commands =
          (e.Vars)
          ((CmdComment <TextFromPattern e.Pattern> )
            <SaveBrackets s.NumRanges e.Commands >
          );
      }
    >;
}

//FROM LibraryEx
$EXTERN MapReduce, DelAccumulator, Reduce, Map;

$LABEL Brackets, ADT-Brackets, CallBrackets;

DoGenPattern {
  // Распознавание литералов (символьных, целочисленных, имён)
  s.NumRanges e.Ranges-B (s.Num (TkChar s.Char) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdChar AlgLeft s.Num s.Char))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkNumber s.Number) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdNumber AlgLeft s.Num s.Number))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkName e.Name) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdName AlgLeft s.Num e.Name))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkIdentifier e.Name) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdIdent AlgLeft s.Num e.Name))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkChar s.Char)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdChar AlgRight s.Num s.Char))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkNumber s.Number)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdNumber AlgRight s.Num s.Number))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkName e.Name)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdName AlgRight s.Num e.Name))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkIdentifier e.Name)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdIdent AlgRight s.Num e.Name))
    >;

  // Распознавание скобок
  s.NumRanges e.Ranges-B
  (s.Num (#Brackets e.SubRange) e.Range)
  e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.NumRanges>
      e.Ranges-B (s.NumRanges e.SubRange) (s.Num e.Range) e.Ranges-E
      (e.Vars) (e.Commands (CmdBrackets AlgLeft s.Num s.NumRanges))
    >;

  s.NumRanges e.Ranges-B
  (s.Num e.Range (#Brackets e.SubRange))
  e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.NumRanges>
      e.Ranges-B (s.Num e.Range) (s.NumRanges e.SubRange) e.Ranges-E
      (e.Vars) (e.Commands (CmdBrackets AlgRight s.Num s.NumRanges))
    >;

  // Распознавание АТД-скобок
  s.NumRanges e.Ranges-B
  (s.Num (#ADT-Brackets (e.Name) e.SubRange) e.Range)
  e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.NumRanges>
      e.Ranges-B (s.NumRanges e.SubRange) (s.Num e.Range) e.Ranges-E
      (e.Vars)
      (e.Commands (CmdADT AlgLeft s.Num s.NumRanges e.Name))
    >;

  s.NumRanges e.Ranges-B
  (s.Num e.Range (#ADT-Brackets (e.Name) e.SubRange))
  e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      <Inc s.NumRanges>
      e.Ranges-B (s.Num e.Range) (s.NumRanges e.SubRange) e.Ranges-E
      (e.Vars)
      (e.Commands (CmdADT AlgRight s.Num s.NumRanges e.Name))
    >;

  // Пустой диапазон
  s.NumRanges e.Ranges-B (s.Num /* пусто */) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B e.Ranges-E
      (e.Vars) (e.Commands (CmdEmpty AlgLeft s.Num))
    >;

  // Распознавание переменных
  s.NumRanges e.Ranges-B (s.Num (TkVariable s.Mode e.Index) e.Range) e.Ranges-E
  (e.Vars-B (s.Count s.Mode e.Index) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars-B (<Inc s.Count> s.Mode e.Index) e.Vars-E)
      (e.Commands (CmdRepeated AlgLeft s.Num <Inc s.Count> s.Mode e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkVariable s.Mode e.Index)) e.Ranges-E
  (e.Vars-B (s.Count s.Mode e.Index) e.Vars-E) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars-B (<Inc s.Count> s.Mode e.Index) e.Vars-E)
      (e.Commands (CmdRepeated AlgRight s.Num <Inc s.Count> s.Mode e.Index))
    >;

  // Диапазон с закрытой переменной
  s.NumRanges e.Ranges-B (s.Num (TkVariable 'e' e.Index)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B e.Ranges-E
      (e.Vars (1 'e' e.Index))
      (e.Commands (CmdClosedE AlgLeft s.Num 'e' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkVariable 's' e.Index) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 's' e.Index)) (e.Commands (CmdVar AlgLeft s.Num 's' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkVariable 't' e.Index) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 't' e.Index)) (e.Commands (CmdVar AlgLeft s.Num 't' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkVariable 's' e.Index)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 's' e.Index)) (e.Commands (CmdVar AlgRight s.Num 's' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num e.Range (TkVariable 't' e.Index)) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 't' e.Index)) (e.Commands (CmdVar AlgRight s.Num 't' e.Index))
    >;

  s.NumRanges e.Ranges-B (s.Num (TkVariable 'e' e.Index) e.Range) e.Ranges-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      s.NumRanges e.Ranges-B (s.Num e.Range) e.Ranges-E
      (e.Vars (1 'e' e.Index))
      (e.Commands (CmdOpenedE AlgLeft s.Num 'e' e.Index))
    >;

  // Завершение разбора.
  s.NumRanges /* пусто */ (e.Vars) (e.Commands) =
    s.NumRanges (e.Vars) e.Commands;
}

$FORWARD DoSaveBrackets;

SaveBrackets {
  s.LastBracket e.Commands = <DoSaveBrackets s.LastBracket () e.Commands>;
}

$FORWARD ExtractBrackets, DoSaveBrackets-MakeSavers;

//FROM LibraryEx
$EXTERN Map;

DoSaveBrackets {
  s.LastBracket (e.Scanned)
  e.Commands-B (CmdOpenedE AlgLeft s.Num 'e' e.Index) e.Commands-E =
    <Fetch
      e.Scanned e.Commands-B (CmdOpenedE AlgLeft s.Num 'e' e.Index)
      {
        e.CommandsBeforeEMatch =
          <DoSaveBrackets-MakeSavers
            s.LastBracket
            ( <ExtractBrackets e.CommandsBeforeEMatch> )
            ( e.CommandsBeforeEMatch )
            e.Commands-E
          >;
      }
    >;

  s.LastBracket (e.Scanned) e.Commands = e.Scanned e.Commands;
}

//From LibraryEx 
$EXTERN WriteLine, StrFromInt;

DoSaveBrackets-MakeSavers {
  s.LastBracket
  (e.BoundedBrackets-B s.Num e.BoundedBrackets-E)
  (e.Scanned)
  e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E =
    <DoSaveBrackets-MakeSavers
      <Inc s.LastBracket>
      (e.BoundedBrackets-B e.BoundedBrackets-E)
      (e.Scanned (CmdSave s.Num s.LastBracket))
      <Map
        {
          /*
            Все команды распознавания содержат номер скобок третьим термом,
            общий формат (s.Command s.Direction s.BracketNum e.Info)
          */
          (s.Command^ s.Direction^ s.Num e.Info^) =
            (s.Command s.Direction s.LastBracket e.Info);

          (s.Command^ s.Direction^ s.OtherNum e.Info^) =
            (s.Command s.Direction s.OtherNum e.Info);
        }
        e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E
      >
    >;

  s.LastBracket (e.UnusedBoundedBrackets) (e.Scanned) e.Commands =
    <DoSaveBrackets s.LastBracket (e.Scanned) e.Commands>;
}

$FORWARD Brackets-Set;

ExtractBrackets {
  e.Commands =
    <Brackets-Set
      <Map
        {
          /*
            Все команды распознавания содержат номер скобок третьим термом,
            общий формат (s.Command s.Direction s.BracketNum e.Info)
          */
          (CmdBrackets s.Direction s.BracketNum s.InnerNum) =
            s.BracketNum s.InnerNum;

          (CmdADT s.Direction s.BracketNum s.InnerNum e.Name) =
            s.BracketNum s.InnerNum;

          (s.Command s.Direction s.BracketNum e.Info) = s.BracketNum;
        }
        e.Commands
      >
    >;
}

Brackets-Set {
  e.Unique s.Repeated e.Middle s.Repeated e.Rest =
    e.Unique <Brackets-Set s.Repeated e.Middle e.Rest>;

  e.Unique = e.Unique;
}

//FROM Library
$EXTERN StrFromInt;

$FORWARD TextFromPattern-Char;

TextFromPattern {
  (#Brackets e.Inner) e.Tail =
    ' (' <TextFromPattern e.Inner> ' )' <TextFromPattern e.Tail>;

  (#ADT-Brackets (e.Name) e.Inner) e.Tail =
    ' [' e.Name ' ' <TextFromPattern e.Inner> ' ]' <TextFromPattern e.Tail>;

  (TkChar s.Char) e.Tail =
    ' ' '' <TextFromPattern-Char (TkChar s.Char) e.Tail>;

  (TkNumber s.Number) e.Tail =
    ' ' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkName e.Name) e.Tail =
    ' & ' e.Name <TextFromPattern e.Tail>;

  (TkVariable s.Mode e.Index s.Depth) e.Tail =
    ' ' s.Mode '.' e.Index '#' <StrFromInt s.Depth> <TextFromPattern e.Tail>;

  (TkIdentifier e.Name) e.Tail =
    ' # ' e.Name <TextFromPattern e.Tail>;

  = ;
}

Escape {
  '\n' = '\\n';
  '\r' = '\\r';
  '\t' = '\\t';
  '\\' = '\\\\';
  '' = '\\' '';
  '"' = '\\"';

  s.Other = s.Other;
}

TextFromPattern-Char {
  (TkChar s.Char) e.Tail =
    <Escape s.Char> <TextFromPattern-Char e.Tail>;

  = '';

  e.Other = <TextFromPattern e.Other>;
}

//==============================================================================
// Генерация результата
//==============================================================================

$FORWARD DoGenResult;

GenResult {
  e.Result =
    <DoGenResult
      (/* vars */)
      (/* alloc commands */) (/* other commands */)
      0 // счётчик новых элементов
      e.Result
    >;
}

// Основные команды работы с образцом
//  (CmdAllocateElem s.Number s.ElType e.Info)
//  (CmdLinkBrackets s.Left s.Right)
//  (CmdPushStack s.Number)
//  (CmdInsertElem s.Number)
//  (CmdInsertVar s.Usings s.Mode e.Index)
$EENUM
  CmdAllocateElem,
  CmdLinkBrackets,
  CmdPushStack,
  CmdInsertElem,
  CmdInsertVar;

// Спецификаторы команд (элементы)
$EENUM
  ElChar, ElName, ElNumber, ElIdent,
  ElOpenADT, ElCloseADT,
  ElOpenBracket, ElCloseBracket,
  ElOpenCall, ElCloseCall;

/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

$LABEL CloseCall;

DoGenResult {
  // Создаём литералы
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (TkChar s.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElChar s.Value))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter (TkName e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElName e.Name))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkNumber s.Number) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElNumber s.Number))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkIdentifier e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElIdent e.Name))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  /*
    Обработка открывающих скобок всех трёх типов осуществляется похоже.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#Brackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElOpenBracket))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (TkCloseBracket s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#CallBrackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElOpenCall))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (#CloseCall s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#ADT-Brackets (e.Name) e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElOpenADT))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter>
      (TkName e.Name) e.InBrackets (TkCloseADT s.Counter) e.Result
    >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД -- слинковать, угловые -- добавить в стек.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseBracket s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElCloseBracket))
      (
        (CmdLinkBrackets s.OpenCounter s.Counter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseADT s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElCloseADT))
      (
        (CmdLinkBrackets s.OpenCounter s.Counter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (#CloseCall s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdAllocateElem s.Counter ElCloseCall))
      (
        (CmdPushStack s.Counter)
        (CmdPushStack s.OpenCounter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  // Обработка переменных
  (e.Vars-B (s.Usings s.Mode e.Index) e.Vars-E) (e.AllocCommands) (e.Commands)
  s.Counter (TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars-B (<Inc s.Usings> s.Mode e.Index) e.Vars-E)
      (e.AllocCommands)
      ((CmdInsertVar <Inc s.Usings> s.Mode e.Index) e.Commands)
      s.Counter e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkVariable s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars (1 s.Mode e.Index))
      (e.AllocCommands)
      ((CmdInsertVar 1 s.Mode e.Index) e.Commands)
      s.Counter e.Result
    >;

  // Завершение просмотра
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter =
    (e.Vars) (e.AllocCommands) (e.Commands);
}

//==============================================================================
// Обобщение информации -- уничтожение ненужных переменных,
// копирование повторных.
//==============================================================================

$FORWARD ReplicateVars, VarSetUnion, VarSetDifference,
  ClosedEVariables, RepeatedEVariables, FilterUnusedCmdClosedE, MakeDeclaration,
  GenerateResult-OpenELoops, MakeCopyVar, FoldAllocCommands, MakeInterpCommands;

//FROM LibraryEx
$EXTERN Map, Seq;

//From Library
$EXTERN Add, Inc;

$EENUM CmdEmptyResult, CmdReturnResult, CmdIfDef, CmdElse, CmdEndIf,
  CmdInitRAA, CmdFinRAA;

//FROM Library
$EXTERN WriteLine;

DebugVarInfo {
  ( s.Usings 'e' e.Index ) =
    <WriteLine 'Debug EVar Info: \n'
               '\tUsings: ' s.Usings '\n'
               '\tIndex: ' e.Index '\n'
    >;
  ( s.Usings s.Mode e.Index ) =
    <WriteLine 'Debug Var Info: \n'
               '\tUsings: ' s.Usings '\n'
               '\tIndex: ' e.Index '\n'
               '\tMode: ' s.Mode '\n'
    >;
}

DebugNVarInfo {
  ( s.Number s.Usings 'e' e.Index ) =
    <WriteLine 'Debug EVar Info: \n'
               '\tAlloc: ' <StrFromInt s.Number> '\n'
               '\tUsings: ' s.Usings '\n'
               '\tIndex: ' e.Index '\n'
    >;
  ( s.Number s.Usings s.Mode e.Index ) =
    <WriteLine 'Debug Var Info: \n'
               '\tAlloc: ' <StrFromInt s.Number> '\n'
               '\tUsings: ' s.Usings '\n'
               '\tIndex: ' e.Index '\n'
               '\tMode: ' s.Mode '\n'
    >;
}

NumerateVars {
  s.Number ( s.Usings 'e' e.Index ) e.Etc =
    (s.Number s.Usings 'e' e.Index) <NumerateVars <Add s.Number 2> e.Etc>
  ;
  s.Number ( s.Usings s.Mode e.Index ) e.Etc =
    (s.Number s.Usings s.Mode e.Index) <NumerateVars <Inc s.Number> e.Etc>
  ;

  s.Number = (s.Number)
  ;
}

IssueVars {
  e.Variables (s.Number) =
    (CmdIssueMem s.Number)
    <Map MakeDeclaration e.Variables>
  ;
}

FindAllocForCopiedVars {
  (e.Set1-B (s.Number e.Common) e.Set1-E) (e.Set2-B (e.Common) e.Set2-E) =
    //<DebugNVarInfo (s.Number e.Common)>
    (s.Number e.Common)
    <FindAllocForCopiedVars (e.Set1-B e.Set1-E) (e.Set2-B e.Set2-E)>
  ;

  (e.Set1) (e.Set2) = ;
}

GenBoundPrologue {
  =
    (CmdiMoveLeft 0)
    (CmdiMoveLeft 0)
    (CmdiMoveRigth 0);
}


GenInterpretPatternCommand {
  (CmdBrackets s.Direction s.Num s.NumRanges) e.Etc = 
    (CmdiBracket s.Direction s.Num s.NumRanges)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdClosedE AlgLeft s.BracketNumber 'e' e.Index) e.Etc =
    (CmdiContextSet s.BracketNumber 'e' e.Index)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdNumber s.Direction s.BracketNumber s.Number) e.Etc =
    (CmdiNum s.Direction s.BracketNumber s.Number)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdIdent s.Direction s.BracketNumber e.Name) e.Etc =
    (CmdiIdent s.Direction s.BracketNumber e.Name)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdSave s.OldBracketNumber s.NewBracketNumber) e.Etc =
    (CmdiSave s.OldBracketNumber s.NewBracketNumber)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index) e.Etc =
    (CmdiEStart s.BracketNum 'e' e.Index)
    <GenInterpretPatternCommand e.Etc>
    (CmdiEStop)
    ;

  // (CmdOpenedE-End AlgLeft s.BracketNumber 'e' e.Index) e.Etc =
  //   (CmdiEStop s.BracketNumber 'e' e.Index)
  //   <GenInterpretPatternCommand e.Etc>
  //   ;

  (CmdChar s.Direction s.BracketNumber s.Char) e.Etc =
    (CmdiChar s.Direction s.BracketNumber s.Char)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdName s.Direction s.BracketNumber e.Name) e.Etc =
    (CmdiName s.Direction s.BracketNumber e.Name)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) e.Etc =
    (CmdiADT s.Direction s.BracketNumber s.InnerBrackets e.Name)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdRepeated s.Direction s.BracketNumber e.VarInfo) e.Etc =
    (CmdiRepeat s.Direction s.BracketNumber e.VarInfo)
    <GenInterpretPatternCommand e.Etc>
    ;

  //временный хак
  (CmdEmpty AlgLeft s.BracketNumber) e.Etc = 
    (CmdiEmpty s.BracketNumber)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdVar s.Direction s.BracketNumber s.Mode e.Info) e.Etc =
    // <WriteLine 'Var: ' s.Direction ' :bn: ' s.BracketNumber
    //   ' :mode: ' s.Mode ' :info: ' e.Info >
    (CmdiVar s.Direction s.BracketNumber s.Mode e.Info)
    <GenInterpretPatternCommand e.Etc>
    ;

  (CmdEmpty s.Direction s.BracketNumber) e.Etc = 
    <WriteLine 'CmdEmpty: ' s.Direction ' : ' s.BracketNumber >
    ;

  (e.Command) e.PatternCommands = <GenInterpretPatternCommand e.PatternCommands>;
   =;
}


GeneralizeResult {
  (e.PatternVars) (e.PatternCommands)
  (e.ResultVars) (e.ResultAllocCommands) (e.ResultCommands) =
    <Fetch
      (<ReplicateVars e.PatternVars>)
      (<ReplicateVars e.ResultVars>)
      (<Map RepeatedEVariables e.PatternCommands>)
      <Map ClosedEVariables e.PatternCommands>
      <Seq
        {
          (e.PatternVars^) (e.ResultVars^) (e.RepeatedEs) e.ClosedEs =
            (<VarSetUnion (e.PatternVars) (e.ResultVars)>)
            (<VarSetDifference (e.ResultVars) (e.PatternVars)>)
            <VarSetDifference (e.ClosedEs) (e.RepeatedEs e.ResultVars)>;
        }
        {
          (e.CommonVars) (e.CopiedVars) e.UnusedClosedEs =
            (<VarSetDifference (e.CommonVars) (e.UnusedClosedEs)>)
            (e.CopiedVars)
            <Map (FilterUnusedCmdClosedE e.UnusedClosedEs) e.PatternCommands>;
        }
        {
          (e.CommonVars) (e.CopiedVars) e.Etc =
            (<NumerateVars 0 e.CommonVars>) (e.CopiedVars) e.Etc;
        }
        {
          (e.NCommonVars) (e.CopiedVars) e.Etc =
            (e.NCommonVars)
            (<FindAllocForCopiedVars (e.NCommonVars) (e.CopiedVars)>)
            (e.CopiedVars)
            e.Etc;
        }
        {
          (e.NCommonVars) (e.MCopiedVars) (e.CopiedVars) e.PatternCommands^ =
            <GenerateResult-OpenELoops

              <IssueVars e.NCommonVars>

              e.PatternCommands
              (CmdIfDef)
              (CmdInitRAA)
              //<GenBoundPrologue>
              <GenInterpretPatternCommand e.PatternCommands>
              <Map
                (MakeInterpCommands e.MCopiedVars)
                <FoldAllocCommands
                  (e.ResultAllocCommands)
                  e.ResultCommands
                >
              >
              (CmdFinRAA)
              (CmdElse)
              (CmdEmptyResult)
              <Map MakeCopyVar e.CopiedVars>
              e.ResultAllocCommands
              e.ResultCommands
              (CmdReturnResult)
              (CmdEndIf)
            >;
        }
      >
    >;
}

//FROM LibraryEx
$EXTERN Dec;

ReplicateVar {
  (1 s.Mode e.Index) = (1 s.Mode e.Index);

  (s.Using s.Mode e.Index) =
    <ReplicateVar (<Dec s.Using> s.Mode e.Index)>
    (s.Using s.Mode e.Index);
}

ReplicateVars {
  e.Vars = <Map ReplicateVar e.Vars>;
}

VarSetUnion {
  ( e.Set1-B t.Common e.Set1-E ) ( e.Set2-B t.Common e.Set2-E ) =
    t.Common
    <VarSetUnion (e.Set1-B e.Set1-E) (e.Set2-B e.Set2-E)>;

  ( e.Set1 ) ( e.Set2 ) = e.Set1 e.Set2;
}

VarSetDifference {
  ( e.Set1-B t.Common e.Set1-E ) ( e.Set2-B t.Common e.Set2-E ) =
    e.Set1-B <VarSetDifference (e.Set1-E) ( e.Set2-B e.Set2-E )>;

  ( e.Set1 ) ( e.Set2 ) = e.Set1;
}

ClosedEVariables {
  (CmdClosedE AlgLeft s.Num 'e' e.Index) = (1 'e' e.Index);

  t.Other = /* игнорируем */;
}

RepeatedEVariables {
  (CmdRepeated s.Direction s.Num s.Count 'e' e.Index) = (1 'e' e.Index);

  t.Other = /* игнорируем */;
}

FilterUnusedCmdClosedE {
  e.Unuseds-B (1 'e' e.Index s.Depth) e.Unuseds-E
  (CmdClosedE AlgLeft s.Num 'e' e.Index s.Depth) =
    (CmdComment ' Unused closed variable e.' e.Index '#' <StrFromInt s.Depth>);

  e.Unuseds t.OtherCommand = t.OtherCommand;
}

$EENUM CmdDeclareEVar, CmdDeclareVar;

//FROM Library
$EXTERN WriteLine;

MakeDeclaration {
  ( s.Number s.Usings 'e' e.Index ) =
    (CmdDeclareEVar s.Number s.Usings 'e' e.Index);

  ( s.Number s.Usings s.Mode e.Index ) =
    (CmdDeclareVar s.Number s.Usings s.Mode e.Index);
}

$EENUM CmdCopyEVar, CmdCopyVar;

MakeCopyVar {
  ( s.Usings 'e' e.Index ) = (CmdCopyEVar s.Usings 'e' e.Index);

  ( s.Usings s.Mode e.Index ) =
    (CmdCopyVar s.Usings s.Mode e.Index);
}

$EENUM CmdArrChar, CmdArrFunc, CmdArrInt, CmdArrIdent, CmdArrOB, CmdArrCB,
  CmdArrOADT, CmdArrCADT, CmdArrOC, CmdArrCC, CmdArrSplice, CmdArrCopy;

FoldAllocCommands {
  (e.Allocs-B (CmdAllocateElem s.ElemNo s.Type e.Value) e.Allocs-E)
  (CmdInsertElem s.ElemNo) e.Commands =
    <FoldAllocCommands (e.Allocs-B e.Allocs-E) e.Commands>
    (CmdInsertElem s.Type s.ElemNo e.Value);

  (e.Allocs)
  (CmdInsertVar s.Usings s.Mode e.Index) e.Commands =
    <FoldAllocCommands (e.Allocs) e.Commands>
    (CmdInsertVar s.Usings s.Mode e.Index);

  (e.Allocs)
  (CmdInsertVar s.Usings s.Mode e.Index) e.Commands =
    <FoldAllocCommands (e.Allocs) e.Commands>
    (CmdInsertVar s.Usings s.Mode e.Index);

  (e.Allocs)
  (CmdLinkBrackets e.CmdInfo) e.Commands =
    <FoldAllocCommands (e.Allocs) e.Commands>;

  (e.Allocs)
  (CmdPushStack e.CmdInfo) e.Commands =
    <FoldAllocCommands (e.Allocs) e.Commands>;

  (/* должно быть пусто */) /* пусто */ = /* пусто */;
}

MakeInterpCommands {
  e.CopiedVars-B (s.Number s.Usings s.Mode e.Index) e.CopiedVars-E
  (CmdInsertVar s.Usings s.Mode e.Index) =
    //<WriteLine 'Debug 1 index '>
    //<DebugNVarInfo (s.Number s.Usings s.Mode e.Index)>
    (CmdArrCopy s.Mode e.Index);

  e.CopiedVars (CmdInsertVar s.Usings s.Mode e.Index) =
    //<WriteLine 'Debug 2 index'>
    //<DebugVarInfo (s.Usings s.Mode e.Index)>
    (CmdArrSplice s.Usings s.Mode e.Index);

  e.CopiedVars (CmdInsertElem ElChar s.Counter s.Value) =
    (CmdArrChar s.Value);

  e.CopiedVars (CmdInsertElem ElName s.Counter e.Name) =
    (CmdArrFunc e.Name);

  e.CopiedVars (CmdInsertElem ElNumber s.Counter s.Number) =
    (CmdArrInt s.Number);

  e.CopiedVars (CmdInsertElem ElIdent s.Counter e.Name) =
    (CmdArrIdent e.Name);

  e.CopiedVars (CmdInsertElem ElOpenBracket s.Counter) =
    (CmdArrOB);

  e.CopiedVars (CmdInsertElem ElOpenADT s.Counter) =
    (CmdArrOADT);

  e.CopiedVars (CmdInsertElem ElOpenCall s.Counter) =
    (CmdArrOC);

  e.CopiedVars (CmdInsertElem ElCloseBracket s.Counter) =
    (CmdArrCB);

  e.CopiedVars (CmdInsertElem ElCloseADT s.Counter) =
    (CmdArrCADT);

  e.CopiedVars (CmdInsertElem ElCloseCall s.Counter) =
    (CmdArrCC);
}

GenerateResult-OpenELoops {
  e.Commands-B (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index) e.Commands-E =
    e.Commands-B
    (CmdOpenedE-Start AlgLeft s.BracketNum 'e' e.Index)
    <GenerateResult-OpenELoops e.Commands-E>
    (CmdOpenedE-End AlgLeft s.BracketNum 'e' e.Index)
    ;

  e.Commands = e.Commands;
}
