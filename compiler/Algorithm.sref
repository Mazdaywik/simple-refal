$FORWARD GeneralizeResult, GenPattern, GenResult;

$ENTRY MakeAlgorithm {
  (s.LastBracket e.Pattern) (e.Result) =
    <GeneralizeResult
      <GenPattern s.LastBracket e.Pattern>
      <GenResult
        (/* vars */) (/* commands */) 0 // счётчик новых элементов
        e.Result
      >
    >;
}

/*
  e.Vars ::= (s.Count s.Mode e.Index)*
*/

//==============================================================================
// Генерация образца
//==============================================================================

//FROM Lexer
$EXTERN
  TkOpenBracket, TkCloseBracket, TkOpenADT, TkCloseADT,
  TkName, TkNumber, TkVariable, TkChar;

//FROM LibraryEx
$EXTERN Inc;

// Направление распознавания
$EENUM AlgLeft, AlgRight;

/*
  Тип идентификатора следует сделать доступным
  и из Driver'а, и из Generator'а.
  Остаётся только импортировать отсюда.
*/
$EENUM TkIdentifier;

/*
Команды распознавания
  Литералы, формат (Cmd*** s.Direction s.BracketNum e.Literal)
  Скобки, формат (CmdBrackets s.Direction s.BracketNum s.InnerNum)
  АТД, формат
    (CmdADT s.Direction s.BracketNum s.InnerNum e.Name)
  Пустые скобки, формат (CmdEmpty AlgLeft s.BracketNum),
    направление добавлено для единнобразия, генератором не используется
  Переменные:
    повторные, формат
      (CmdRepeated s.Direction s.BracketNum s.Usings s.Mode e.Index)
    новые s и t, формат (CmdVar s.Direction s.BracketNum s.Mode e.Index)
    открытые e:
      первоначальный формат (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index)
      после обработки:
        (CmdOpenedE-Start AlgLeft s.BracketNum 'e' e.Index)
        (CmdOpenedE-End AlgLeft s.BracketNum 'e' e.Index)
    закрытые e, формат
      (CmdClosedE AlgLeft s.BracketNum 'e' e.Index (e.BracketsForSave))
  Команды сохранения скобок
    (CmdSave s.OldNumber e.NewNumber)
  Комментарий, вносимый в исходный код (CmdComment e.Text)
*/
$EENUM
  CmdChar, CmdNumber, CmdName, CmdIdent,
  CmdBrackets, CmdADT, CmdEmpty,
  CmdRepeated, CmdVar, CmdClosedE,
  CmdOpenedE-Start, CmdOpenedE-End,
  CmdComment, CmdSave;

$ENUM CmdOpenedE;

$FORWARD DoGenPattern, TextFromPattern, SaveBrackets;

$ENUM LeftPtr, RightPtr;

//FROM LibraryEx
$EXTERN Fetch;

GenPattern {
  s.LastBracket e.Pattern =
    <Fetch
      <DoGenPattern
        (LeftPtr 0) e.Pattern (RightPtr 0)
        (/* vars */) (/* commands */)
      >
      {
        e.Pattern^ (e.Vars) (e.Commands) =
          (e.Vars)
          ((CmdComment <TextFromPattern e.Pattern> )
            <SaveBrackets s.LastBracket e.Commands >
          );
      }
    >;
}

DoGenPattern {
  // Распознавание литералов (символьных, целочисленных, имён)
  e.Pattern-B (LeftPtr s.Num) (TkChar s.Char) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkChar s.Char) (LeftPtr s.Num) e.Pattern-E
      (e.Vars) (e.Commands (CmdChar AlgLeft s.Num s.Char))
    >;

  e.Pattern-B (LeftPtr s.Num) (TkNumber s.Number) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkNumber s.Number) (LeftPtr s.Num) e.Pattern-E
      (e.Vars) (e.Commands (CmdNumber AlgLeft s.Num s.Number))
    >;

  e.Pattern-B (LeftPtr s.Num) (TkName e.Name) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkName e.Name) (LeftPtr s.Num) e.Pattern-E
      (e.Vars) (e.Commands (CmdName AlgLeft s.Num e.Name))
    >;

  e.Pattern-B (LeftPtr s.Num) (TkIdentifier e.Name) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkIdentifier e.Name) (LeftPtr s.Num) e.Pattern-E
      (e.Vars) (e.Commands (CmdIdent AlgLeft s.Num e.Name))
    >;

  e.Pattern-B (TkChar s.Char) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkChar s.Char) e.Pattern-E
      (e.Vars) (e.Commands (CmdChar AlgRight s.Num s.Char))
    >;

  e.Pattern-B (TkNumber s.Number) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkNumber s.Number) e.Pattern-E
      (e.Vars) (e.Commands (CmdNumber AlgRight s.Num s.Number))
    >;

  e.Pattern-B (TkName e.Name) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkName e.Name) e.Pattern-E
      (e.Vars) (e.Commands (CmdName AlgRight s.Num e.Name))
    >;

  e.Pattern-B (TkIdentifier e.Name) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkIdentifier e.Name) e.Pattern-E
      (e.Vars) (e.Commands (CmdIdent AlgRight s.Num e.Name))
    >;

  // Распознавание скобок
  e.Pattern-B (LeftPtr s.Num) (TkOpenBracket s.Inner)
  e.Pattern-M (TkCloseBracket s.Inner) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkOpenBracket s.Inner)
      (LeftPtr s.Inner) e.Pattern-M (RightPtr s.Inner)
      (TkCloseBracket s.Inner) (LeftPtr s.Num) e.Pattern-E
      (e.Vars) (e.Commands (CmdBrackets AlgLeft s.Num s.Inner))
    >;

  e.Pattern-B (TkOpenBracket s.Inner) e.Pattern-M
  (TkCloseBracket s.Inner) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkOpenBracket s.Inner)
      (LeftPtr s.Inner) e.Pattern-M (RightPtr s.Inner)
      (TkCloseBracket s.Inner) e.Pattern-E
      (e.Vars) (e.Commands (CmdBrackets AlgRight s.Num s.Inner))
    >;

  // Распознавание АТД-скобок
  e.Pattern-B (LeftPtr s.Num) (TkOpenADT s.Inner)
  (TkName e.Name) e.Pattern-M (TkCloseADT s.Inner) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkOpenADT s.Inner) (TkName e.Name)
      (LeftPtr s.Inner) e.Pattern-M (RightPtr s.Inner)
      (TkCloseADT s.Inner) (LeftPtr s.Num) e.Pattern-E
      (e.Vars)
      (e.Commands (CmdADT AlgLeft s.Num s.Inner e.Name))
    >;

  e.Pattern-B (TkOpenADT s.Inner) (TkName e.Name) e.Pattern-M
  (TkCloseADT s.Inner) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkOpenADT s.Inner)
      (TkName e.Name) (LeftPtr s.Inner) e.Pattern-M (RightPtr s.Inner)
      (TkCloseADT s.Inner) e.Pattern-E
      (e.Vars)
      (e.Commands (CmdADT AlgRight s.Num s.Inner e.Name))
    >;

  // Указатели аннигилируют при встрече
  e.Pattern-B (LeftPtr s.Num) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B e.Pattern-E
      (e.Vars) (e.Commands (CmdEmpty AlgLeft s.Num))
    >;

  // Распознавание переменных
  e.Pattern-B (LeftPtr s.Num) (TkVariable s.Mode e.Index) e.Pattern-E
  (e.Vars-B (s.Count s.Mode e.Index) e.Vars-E) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkVariable s.Mode e.Index) (LeftPtr s.Num) e.Pattern-E
      (e.Vars-B (<Inc s.Count> s.Mode e.Index) e.Vars-E)
      (e.Commands (CmdRepeated AlgLeft s.Num <Inc s.Count> s.Mode e.Index))
    >;

  e.Pattern-B (TkVariable s.Mode e.Index) (RightPtr s.Num) e.Pattern-E
  (e.Vars-B (s.Count s.Mode e.Index) e.Vars-E) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkVariable s.Mode e.Index) e.Pattern-E
      (e.Vars-B (<Inc s.Count> s.Mode e.Index) e.Vars-E)
      (e.Commands (CmdRepeated AlgRight s.Num <Inc s.Count> s.Mode e.Index))
    >;

  // Указатели аннигилируют через закрытую e-переменную
  e.Pattern-B (LeftPtr s.Num) (TkVariable 'e' e.Index)
  (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkVariable 'e' e.Index) e.Pattern-E
      (e.Vars (1 'e' e.Index))
      (e.Commands (CmdClosedE AlgLeft s.Num 'e' e.Index))
    >;

  e.Pattern-B (LeftPtr s.Num) (TkVariable 's' e.Index) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkVariable 's' e.Index) (LeftPtr s.Num) e.Pattern-E
      (e.Vars (1 's' e.Index)) (e.Commands (CmdVar AlgLeft s.Num 's' e.Index))
    >;

  e.Pattern-B (LeftPtr s.Num) (TkVariable 't' e.Index) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkVariable 't' e.Index) (LeftPtr s.Num) e.Pattern-E
      (e.Vars (1 't' e.Index)) (e.Commands (CmdVar AlgLeft s.Num 't' e.Index))
    >;

  e.Pattern-B (TkVariable 's' e.Index) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkVariable 's' e.Index) e.Pattern-E
      (e.Vars (1 's' e.Index)) (e.Commands (CmdVar AlgRight s.Num 's' e.Index))
    >;

  e.Pattern-B (TkVariable 't' e.Index) (RightPtr s.Num) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (RightPtr s.Num) (TkVariable 't' e.Index) e.Pattern-E
      (e.Vars (1 't' e.Index)) (e.Commands (CmdVar AlgRight s.Num 't' e.Index))
    >;

  e.Pattern-B (LeftPtr s.Num) (TkVariable 'e' e.Index) e.Pattern-E
  (e.Vars) (e.Commands) =
    <DoGenPattern
      e.Pattern-B (TkVariable 'e' e.Index) (LeftPtr s.Num) e.Pattern-E
      (e.Vars (1 'e' e.Index))
      (e.Commands (CmdOpenedE AlgLeft s.Num 'e' e.Index))
    >;

  // Завершение разбора. Все указатели аннигилировали.
  e.Pattern (e.Vars) (e.Commands) =
    e.Pattern (e.Vars) (e.Commands);
}

$FORWARD DoSaveBrackets;

SaveBrackets {
  s.LastBracket e.Commands = <DoSaveBrackets s.LastBracket () e.Commands>;
}

$FORWARD ExtractBrackets, DoSaveBrackets-MakeSavers;

//FROM LibraryEx
$EXTERN Map;

DoSaveBrackets {
  s.LastBracket (e.Scanned)
  e.Commands-B (CmdOpenedE AlgLeft s.Num 'e' e.Index) e.Commands-E =
    <Fetch
      e.Scanned e.Commands-B (CmdOpenedE AlgLeft s.Num 'e' e.Index)
      {
        e.CommandsBeforeEMatch =
          <DoSaveBrackets-MakeSavers
            s.LastBracket
            ( <ExtractBrackets e.CommandsBeforeEMatch> )
            ( e.CommandsBeforeEMatch )
            e.Commands-E
          >;
      }
    >;

  s.LastBracket (e.Scanned) e.Commands = e.Scanned e.Commands;
}

DoSaveBrackets-MakeSavers {
  s.LastBracket
  (e.BoundedBrackets-B s.Num e.BoundedBrackets-E)
  (e.Scanned)
  e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E =
    <DoSaveBrackets-MakeSavers
      <Inc s.LastBracket>
      (e.BoundedBrackets-B e.BoundedBrackets-E)
      (e.Scanned (CmdSave s.Num s.LastBracket))
      <Map
        {
          /*
            Все команды распознавания содержат номер скобок третьим термом,
            общий формат (s.Command s.Direction s.BracketNum e.Info)
          */
          (s.Command^ s.Direction^ s.Num e.Info^) =
            (s.Command s.Direction s.LastBracket e.Info);

          (s.Command^ s.Direction^ s.OtherNum e.Info^) =
            (s.Command s.Direction s.OtherNum e.Info);
        }
        e.Commands-B (s.Command s.Direction s.Num e.Args) e.Commands-E
      >
    >;

  s.LastBracket (e.UnusedBoundedBrackets) (e.Scanned) e.Commands =
    <DoSaveBrackets s.LastBracket (e.Scanned) e.Commands>;
}

$FORWARD Brackets-Set;

ExtractBrackets {
  e.Commands =
    <Brackets-Set
      <Map
        {
          /*
            Все команды распознавания содержат номер скобок третьим термом,
            общий формат (s.Command s.Direction s.BracketNum e.Info)
          */
          (CmdBrackets s.Direction s.BracketNum s.InnerNum) =
            s.BracketNum s.InnerNum;

          (s.Command s.Direction s.BracketNum e.Info) = s.BracketNum;
        }
        e.Commands
      >
    >;
}

Brackets-Set {
  e.Unique s.Repeated e.Middle s.Repeated e.Rest =
    e.Unique <Brackets-Set s.Repeated e.Middle e.Rest>;

  e.Unique = e.Unique;
}

//FROM Library
$EXTERN StrFromInt;

$FORWARD TextFromPattern-Char;

TextFromPattern {
  (TkOpenBracket s.Number) e.Tail =
    ' (~' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkCloseBracket s.Number) e.Tail =
    ' )~' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkOpenADT s.Number) e.Tail =
    ' [~' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkCloseADT s.Number) e.Tail =
    ' ]~' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkChar s.Char) e.Tail =
    ' ' '' <TextFromPattern-Char (TkChar s.Char) e.Tail>;

  (TkNumber s.Number) e.Tail =
    ' ' <StrFromInt s.Number> <TextFromPattern e.Tail>;

  (TkName e.Name) e.Tail =
    ' & ' e.Name <TextFromPattern e.Tail>;

  (TkVariable s.Mode e.Index) e.Tail =
    ' ' s.Mode '.' e.Index <TextFromPattern e.Tail>;

  (TkIdentifier e.Name) e.Tail =
    ' # ' e.Name <TextFromPattern e.Tail>;

  = ;
}

Escape {
  '\n' = '\\n';
  '\r' = '\\r';
  '\t' = '\\t';
  '\\' = '\\\\';
  '' = '\\' '';
  '"' = '\\"';

  s.Other = s.Other;
}

TextFromPattern-Char {
  (TkChar s.Char) e.Tail =
    <Escape s.Char> <TextFromPattern-Char e.Tail>;

  = '';

  e.Other = <TextFromPattern e.Other>;
}

//==============================================================================
// Генерация результата
//==============================================================================

// Тип команды
$ENUM CtAlloc, CtInsert, CtBrackets, CtInsertVar;
// Подтип команды
$ENUM
  StChar, StName, StNumber, StIdent,
  StOpenBracket, StCloseBracket, StOpenCall, StCloseCall,
  StOpenADT, StCloseADT,
  StLink, StStack;

//FROM Lexer
$EXTERN TkOpenCall, TkCloseCall;

$FORWARD GenResult-Commands;

GenResult {
  // Создаём литералы
  (e.Vars) (e.Commands) s.Counter (TkChar s.Value) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StChar s.Counter s.Value)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.Commands) s.Counter (TkName e.Name) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StName s.Counter e.Name)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.Commands) s.Counter (TkNumber s.Number) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StNumber s.Counter s.Number)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.Commands) s.Counter (TkIdentifier e.Name) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StIdent s.Counter e.Name)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  /*
    Обработка открывающих скобок обоих типов ничем не отличается
    от обработки литералов.
  */
  (e.Vars) (e.Commands) s.Counter (TkOpenBracket s.Num) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StOpenBracket s.Counter s.Num)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.Commands) s.Counter (TkOpenCall s.Num) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StOpenCall s.Counter s.Num)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.Commands) s.Counter (TkOpenADT s.Num) e.Result =
    <GenResult
      (e.Vars)
      (e.Commands
        (CtAlloc StOpenADT s.Counter s.Num)
        (CtInsert s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД --
    слинковать, угловые -- добавить в стек.
  */
  (e.Vars)
  (e.Commands-B (CtAlloc StOpenBracket s.OpenCounter s.Num) e.Commands-E)
  s.Counter (TkCloseBracket s.Num) e.Result =
    <GenResult
      (e.Vars)
      (
        e.Commands-B
        (CtAlloc StOpenBracket s.OpenCounter s.Num)
        e.Commands-E
        (CtAlloc StCloseBracket s.Counter s.Num)
        (CtInsert s.Counter)
        (CtBrackets StLink s.OpenCounter s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars)
  (e.Commands-B (CtAlloc StOpenADT s.OpenCounter s.Num) e.Commands-E)
  s.Counter (TkCloseADT s.Num) e.Result =
    <GenResult
      (e.Vars)
      (
        e.Commands-B
        (CtAlloc StOpenADT s.OpenCounter s.Num)
        e.Commands-E
        (CtAlloc StCloseADT s.Counter s.Num)
        (CtInsert s.Counter)
        (CtBrackets StLink s.OpenCounter s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars)
  (e.Commands-B (CtAlloc StOpenCall s.OpenCounter s.Num) e.Commands-E)
  s.Counter (TkCloseCall s.Num) e.Result =
    <GenResult
      (e.Vars)
      (
        e.Commands-B
        (CtAlloc StOpenCall s.OpenCounter s.Num)
        e.Commands-E
        (CtAlloc StCloseCall s.Counter s.Num)
        (CtInsert s.Counter)
        (CtBrackets StStack s.OpenCounter)
        (CtBrackets StStack s.Counter)
      )
      <Inc s.Counter> e.Result
    >;

  // Обработка переменных
  (e.Vars-B (s.Usings s.Mode e.Index) e.Vars-E)
  (e.Commands) s.Counter (TkVariable s.Mode e.Index) e.Result =
    <GenResult
      (e.Vars-B (<Inc s.Usings> s.Mode e.Index) e.Vars-E)
      (e.Commands
        (CtInsertVar <Inc s.Usings> s.Mode e.Index)
      )
      s.Counter e.Result
    >;

  (e.Vars) (e.Commands) s.Counter (TkVariable s.Mode e.Index) e.Result =
    <GenResult
      (e.Vars (1 s.Mode e.Index))
      (e.Commands
        (CtInsertVar 1 s.Mode e.Index)
      )
      s.Counter e.Result
    >;

  // Завершение просмотра
  (e.Vars) (e.Commands) s.Counter =
    (e.Vars) ( e.Commands );
}

/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

$FORWARD ConvertCommands-Separated;

//FROM LibraryEx
$EXTERN MapReduce, Map;

SeparateAllocates {
  (e.Allocates) (CtAlloc e.Info) =
    (e.Allocates (CtAlloc e.Info));

  (e.Allocates) t.Other = (e.Allocates) t.Other;
}

GenResult-Commands {
  e.Commands =
    <ConvertCommands-Separated
      <MapReduce
        SeparateAllocates
        (/* Allocates */)
        e.Commands
      >
    >;
}

$FORWARD Reverse, ConvertAllocates, ConvertCommand;

ConvertCommands-Separated {
  (e.Allocates) e.OtherCommands =
    <Map ConvertAllocates e.Allocates>
    <Map ConvertCommand <Reverse e.OtherCommands>>;
}

Reverse {
  t.First e.Medium t.Last = t.Last <Reverse e.Medium> t.First;
  t.One = t.One;
  = ;
}

// Основные команды работы с образцом
//  (CmdAllocateElem s.Number s.ElType e.Info)
//  (CmdLinkBrackets s.Left s.Right)
//  (CmdPushStack s.Number)
//  (CmdInsertElem s.Number)
//  (CmdInsertEVar s.Usings 'e' e.Index)
$EENUM
  CmdAllocateElem,
  CmdLinkBrackets,
  CmdPushStack,
  CmdInsertElem,
  CmdInsertEVar;

// Спецификаторы команд (элементы)
$EENUM
  ElChar, ElName, ElNumber, ElIdent,
  ElOpenADT, ElCloseADT,
  ElOpenBracket, ElCloseBracket,
  ElOpenCall, ElCloseCall,
  ElElem, ElSTVar;

ElemType {
  StChar s.Char = ElChar s.Char;
  StName e.Name = ElName e.Name;
  StNumber s.Number = ElNumber s.Number;
  StIdent e.Name = ElIdent e.Name;
  StOpenADT s.Num = ElOpenADT;
  StCloseADT s.Num = ElCloseADT;
  StOpenBracket s.Num = ElOpenBracket;
  StCloseBracket s.Num = ElCloseBracket;
  StOpenCall s.Num = ElOpenCall;
  StCloseCall s.Num = ElCloseCall;
}

ConvertAllocates {
  (CtAlloc s.Type s.Number e.Value) =
    (CmdAllocateElem s.Number <ElemType s.Type e.Value>);
}

ConvertCommand {
  (CtInsert s.Number) = (CmdInsertElem ElElem s.Number);

  (CtInsertVar s.Usings 'e' e.Index) = (CmdInsertEVar s.Usings 'e' e.Index);

  (CtInsertVar s.Usings s.STMode e.Index) =
    (CmdInsertElem ElSTVar s.Usings s.STMode e.Index);

  (CtBrackets StStack s.Number) = (CmdPushStack s.Number);

  (CtBrackets StLink s.LeftNumber s.RightNumber) =
    (CmdLinkBrackets s.LeftNumber s.RightNumber);
}

//==============================================================================
// Обобщение информации -- уничтожение ненужных переменных,
// копирование повторных.
//==============================================================================

$FORWARD GeneralizeResult-Vars, ReplicateVars;

GeneralizeResult {
  (e.PatternVars) (e.PatternCommands)
  (e.ResultVars) (e.ResultCommands) =
    <GeneralizeResult-Vars
      ( <ReplicateVars e.PatternVars> )
      ( <ReplicateVars e.ResultVars> )
      (e.PatternCommands) (e.ResultCommands)
    >;
}

//FROM LibraryEx
$EXTERN Dec;

ReplicateVar {
  (1 s.Mode e.Index) = (1 s.Mode e.Index);

  (s.Using s.Mode e.Index) =
    <ReplicateVar (<Dec s.Using> s.Mode e.Index)>
    (s.Using s.Mode e.Index);
}

ReplicateVars {
  e.Vars = <Map ReplicateVar e.Vars>;
}

$FORWARD GeneralizeResult-CopyVars, VarSetUnion, VarSetDifference;

GeneralizeResult-Vars {
  ( e.PatternVars ) ( e.ResultVars )
  ( e.PatternCommands ) ( e.ResultCommands ) =
    <GeneralizeResult-CopyVars
      ( <VarSetUnion (e.PatternVars) (e.ResultVars)> )
      ( e.PatternCommands )
      ( <VarSetDifference (e.ResultVars) (e.PatternVars)> )
      ( e.ResultCommands )
    >;
}

VarSetUnion {
  ( e.Set1-B t.Common e.Set1-E ) ( e.Set2-B t.Common e.Set2-E ) =
    t.Common
    <VarSetUnion (e.Set1-B e.Set1-E) (e.Set2-B e.Set2-E)>;

  ( e.Set1 ) ( e.Set2 ) = e.Set1 e.Set2;
}

VarSetDifference {
  ( e.Set1-B t.Common e.Set1-E ) ( e.Set2-B t.Common e.Set2-E ) =
    e.Set1-B <VarSetDifference (e.Set1-E) ( e.Set2-B e.Set2-E )>;

  ( e.Set1 ) ( e.Set2 ) = e.Set1;
}

$FORWARD MakeDeclaration, MakeCopyVar, MakeInterpCommands,
  GenerateResult-Interp;

$EENUM CmdEmptyResult, CmdReturnResult, CmdIfDef, CmdElse, CmdEndIf,
  CmdInitRAA, CmdFinRAA;

GeneralizeResult-CopyVars {
  ( e.CommonVars ) ( e.Pattern ) ( e.CopiedVars ) ( e.Result ) =
    <GenerateResult-Interp
      (<Map MakeDeclaration e.CommonVars> e.Pattern)
      (e.CopiedVars)
      (e.Result)
    >;
}

$FORWARD GenerateResult-OpenELoops;

GenerateResult-Interp {
  (e.Pattern) (e.CopiedVars) (e.Result) =
    <GenerateResult-OpenELoops
      e.Pattern
      (CmdIfDef)
      (CmdInitRAA)
      <Map (MakeInterpCommands e.CopiedVars) e.Result>
      (CmdFinRAA)
      (CmdElse)
      (CmdEmptyResult)
      <Map MakeCopyVar e.CopiedVars>
      <GenResult-Commands e.Result>
      (CmdReturnResult)
      (CmdEndIf)
    >;
}

$EENUM CmdDeclareEVar, CmdDeclareVar;

MakeDeclaration {
  ( s.Usings 'e' e.Index ) = (CmdDeclareEVar s.Usings 'e' e.Index);

  ( s.Usings s.Mode e.Index ) =
    (CmdDeclareVar s.Usings s.Mode e.Index);
}

$EENUM CmdCopyEVar, CmdCopyVar;

MakeCopyVar {
  ( s.Usings 'e' e.Index ) = (CmdCopyEVar s.Usings 'e' e.Index);

  ( s.Usings s.Mode e.Index ) =
    (CmdCopyVar s.Usings s.Mode e.Index);
}

$EENUM CmdArrChar, CmdArrFunc, CmdArrInt, CmdArrIdent, CmdArrOB, CmdArrCB,
  CmdArrOADT, CmdArrCADT, CmdArrOC, CmdArrCC, CmdArrSplice, CmdArrCopy;

MakeInterpCommands {
  e.CopiedVars-B (s.Usings s.Mode e.Index) e.CopiedVars-E
  (CtInsertVar s.Usings  s.Mode e.Index) =
    (CmdArrCopy s.Mode e.Index);

  e.CopiedVars (CtInsertVar s.Usings  s.Mode e.Index) =
    (CmdArrSplice s.Usings s.Mode e.Index);

  e.CopiedVars (CtBrackets e.CmdInfo) = ;
  e.CopiedVars (CtInsert s.ElemNo) = ;

  e.CopiedVars (CtAlloc StChar s.Counter s.Value) = 
    (CmdArrChar s.Value);

  e.CopiedVars (CtAlloc StName s.Counter e.Name) = 
    (CmdArrFunc e.Name);

  e.CopiedVars (CtAlloc StNumber s.Counter s.Number) = 
    (CmdArrInt s.Number);

  e.CopiedVars (CtAlloc StIdent s.Counter e.Name) = 
    (CmdArrIdent e.Name);

  e.CopiedVars (CtAlloc StOpenBracket s.Counter s.Num) = 
    (CmdArrOB);

  e.CopiedVars (CtAlloc StOpenADT s.Counter s.Num) = 
    (CmdArrOADT);

  e.CopiedVars (CtAlloc StOpenCall s.Counter s.Num) = 
    (CmdArrOC);

  e.CopiedVars (CtAlloc StCloseBracket s.Counter s.Num) = 
    (CmdArrCB);

  e.CopiedVars (CtAlloc StCloseADT s.Counter s.Num) = 
    (CmdArrCADT);

  e.CopiedVars (CtAlloc StCloseCall s.Counter s.Num) = 
    (CmdArrCC);

  e.CopiedVars (e.AnyCommand) =
    (CmdComment e.AnyCommand ' ');
}

GenerateResult-OpenELoops {
  e.Commands-B (CmdOpenedE AlgLeft s.BracketNum 'e' e.Index) e.Commands-E =
    e.Commands-B
    (CmdOpenedE-Start AlgLeft s.BracketNum 'e' e.Index)
    <GenerateResult-OpenELoops e.Commands-E>
    (CmdOpenedE-End AlgLeft s.BracketNum 'e' e.Index);

  e.Commands = e.Commands;
}
